/*
 * Copyright (C) 2008-2016 TrinityCore <http://www.trinitycore.org/>
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 2 of the License, or (at your
 * option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */

#include "DatabaseEnv.h"
#include "ObjectMgr.h"
#include "GridDefines.h"
#include "GridNotifiers.h"
#include "InstanceScript.h"
#include "SpellMgr.h"
#include "Cell.h"
#include "GameEventMgr.h"
#include "CreatureTextMgr.h"
#include "SpellInfo.h"

#include "SmartScriptMgr.h"


float Sai[775][27] =
{
{1842,0,16,0,0,0,50,0,7000,8000,7000,8000,11,36946,1,0,0,0,0,2,0,0,0,0,0,0,0},
{1842,0,17,0,0,0,50,0,2000,4000,2000,4000,11,59992,1,0,0,0,0,2,0,0,0,0,0,0,0},
{3976,0,14,0,2,0,100,1,0,99,0,0,1,1,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{3976,0,12,0,6,0,100,1,0,0,0,0,45,1,1,0,0,0,0,19,3977,0,0,0,0,0,0},
{3976,0,11,0,0,0,50,0,2000,4000,2000,4000,11,14518,1,0,0,0,0,2,0,0,0,0,0,0,0},
{3976,0,10,0,0,0,50,0,2000,4000,2000,4000,11,5589,1,0,0,0,0,2,0,0,0,0,0,0,0},
{3976,0,9,0,0,0,100,0,30,50,10000,10000,11,8990,2,0,0,0,0,1,0,0,0,0,0,0,0},
{3976,0,8,0,61,0,100,1,0,0,0,0,5,16,0,0,0,0,0,1,0,0,0,0,0,0,0},
{1842,0,8,0,61,0,100,1,0,0,0,0,11,69930,2,0,0,0,0,1,0,0,0,0,0,0,0},
{1842,0,9,0,40,0,100,1,12,9500015,0,0,53,1,9500016,0,0,0,2,1,0,0,0,0,0,0,0},
{1842,0,6,7,38,0,100,0,1,1,0,0,2,777,0,0,0,0,0,1,0,0,0,0,0,0,0},
{1842,0,7,8,61,0,100,1,0,0,0,0,53,0,9500015,0,0,0,2,1,0,0,0,0,0,0,0},
{1842,0,4,5,61,0,100,0,0,0,0,0,45,1,1,0,0,0,0,19,95107,0,0,0,0,0,0},
{1842,0,5,0,61,0,100,0,0,0,0,0,5,16,0,0,0,0,0,1,0,0,0,0,0,0,0},
{1842,0,2,3,61,0,100,0,0,0,0,0,45,1,1,0,0,0,0,19,95105,0,0,0,0,0,0},
{1842,0,3,4,61,0,100,0,0,0,0,0,45,1,1,0,0,0,0,19,95106,0,0,0,0,0,0},
{1842,0,1,2,52,0,100,0,1,1842,0,0,45,1,1,0,0,0,0,19,95104,0,0,0,0,0,0},
{1840,0,12,0,0,0,50,0,3000,5000,3000,5000,11,71134,1,0,0,0,0,2,0,0,0,0,0,0,0},
{1842,0,0,0,19,0,100,0,5944,0,0,0,1,1,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{1840,0,10,0,61,0,100,1,0,0,0,0,51,0,0,0,0,0,0,19,1842,0,0,0,0,0,0},
{1840,0,11,0,0,0,50,0,3000,5000,3000,5000,11,67674,1,0,0,0,0,2,0,0,0,0,0,0,0},
{1840,0,8,9,2,0,100,1,0,80,0,0,1,5,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{1840,0,9,10,61,0,100,1,0,0,0,0,11,70322,2,0,0,0,0,19,1842,0,0,0,0,0,0},
{4300,0,6,0,61,0,100,1,0,0,0,0,1,1,1000,0,0,0,0,1,0,0,0,0,0,0,0},
{4300,0,7,0,52,0,100,1,1,4300,0,0,5,16,0,0,0,0,0,1,0,0,0,0,0,0,0},
{4301,0,0,0,4,0,100,3,0,0,0,0,11,31403,0,0,0,0,0,1,0,0,0,0,0,0,0},
{4301,0,1,2,24,0,100,1,28282,1,0,0,2,35,0,0,0,0,0,1,0,0,0,0,0,0,0},
{4295,0,2,3,24,0,100,1,28282,1,0,0,2,777,0,0,0,0,0,1,0,0,0,0,0,0,0},
{4295,0,3,0,61,0,100,1,0,0,0,0,1,2,1000,0,0,0,0,1,0,0,0,0,0,0,0},
{3976,0,4,0,40,0,100,1,2,0,0,0,1,4,8000,0,0,0,0,1,0,0,0,0,0,0,0},
{3976,0,3,0,21,0,100,1,0,0,0,0,53,0,9500014,0,0,0,0,1,0,0,0,0,0,0,0},
{3976,0,1,0,61,0,100,1,0,0,0,0,24,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
{3976,0,0,1,24,0,100,1,28282,1,0,0,2,777,0,0,0,0,0,1,0,0,0,0,0,0,0},
{3977,0,0,0,24,0,100,0,28282,1,0,0,2,777,0,0,0,0,0,1,0,0,0,0,0,0,0},
{3977,0,1,0,38,0,100,0,1,1,0,0,53,1,9500026,0,0,0,2,1,0,0,0,0,0,0,0},
{3977,0,2,0,40,0,100,1,1,9500026,0,0,1,1,3977,0,0,0,0,1,0,0,0,0,0,0,0},
{3977,0,3,4,2,0,100,1,0,80,0,0,1,3,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{3977,0,4,5,61,0,100,1,0,0,0,0,11,9232,4,0,0,0,0,1,0,0,0,0,0,0,0},
{3977,0,5,6,61,0,100,1,0,0,0,0,11,9256,2,0,0,0,0,2,0,0,0,0,0,0,0},
{3977,0,6,0,61,0,100,1,0,0,0,0,12,95115,1,300000,0,0,0,1,0,0,0,0,0,0,0},
{3977,0,7,0,2,0,100,1,0,20,0,0,1,2,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{3977,0,8,0,0,0,50,0,5000,7000,5000,7000,11,22187,0,0,0,0,0,1,0,0,0,0,0,0,0},
{3977,0,9,0,0,0,50,0,2000,3000,2000,3000,11,9481,0,0,0,0,0,2,0,0,0,0,0,0,0},
{3977,0,10,0,0,0,50,0,3000,5000,3000,5000,11,12039,0,0,0,0,0,9,0,50,100,0,0,0,0},
{4294,0,0,0,0,0,100,2,0,0,2400,3800,11,9672,64,0,0,0,0,2,0,0,0,0,0,0,0},
{4294,0,1,0,0,0,100,2,6000,8000,18000,21000,11,6146,1,0,0,0,0,5,0,0,0,0,0,0,0},
{4294,0,2,0,2,0,100,3,0,15,0,0,25,1,0,0,0,0,0,1,0,0,0,0,0,0,0},
{4294,0,4,5,24,0,100,1,28282,1,0,0,2,777,0,0,0,0,0,1,0,0,0,0,0,0,0},
{4294,0,5,0,61,0,100,1,0,0,0,0,1,1,1000,0,0,0,0,1,0,0,0,0,0,0,0},
{4294,0,6,0,52,0,100,1,1,4294,0,0,5,16,0,0,0,0,0,1,0,0,0,0,0,0,0},
{4295,0,0,1,2,0,100,1,0,30,0,0,11,8269,0,0,0,0,0,1,0,0,0,0,0,0,0},
{4295,0,1,0,61,0,100,1,0,30,0,0,1,1,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{3976,0,7,8,38,0,100,1,1,2,0,0,1,6,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{3976,0,6,0,38,0,100,1,1,1,0,0,1,5,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{3976,0,5,0,52,0,100,1,4,3976,0,0,45,1,1,0,0,0,0,19,95102,0,0,0,0,0,0},
{4295,0,4,0,52,0,100,1,2,4295,0,0,5,16,0,0,0,0,0,1,0,0,0,0,0,0,0},
{4298,0,0,0,4,0,100,3,0,0,0,0,11,7164,0,0,0,0,0,1,0,0,0,0,0,0,0},
{4298,0,1,0,0,0,100,2,5000,5000,20000,30000,11,3639,0,0,0,0,0,1,0,0,0,0,0,0,0},
{4298,0,2,0,0,0,100,2,7500,7500,15000,30000,11,11972,0,0,0,0,0,2,0,0,0,0,0,0,0},
{4298,0,3,4,24,0,100,1,28282,1,0,0,2,777,0,0,0,0,0,1,0,0,0,0,0,0,0},
{4298,0,4,0,61,0,100,1,0,0,0,0,1,1,1000,0,0,0,0,1,0,0,0,0,0,0,0},
{4298,0,5,0,52,0,100,1,1,4298,0,0,5,16,0,0,0,0,0,1,0,0,0,0,0,0,0},
{4299,0,0,0,4,0,100,3,0,0,0,0,11,1006,0,0,0,0,0,1,0,0,0,0,0,0,0},
{4299,0,1,0,0,0,100,2,12000,16000,40000,46000,11,6066,1,0,0,0,0,1,0,0,0,0,0,0,0},
{4299,0,2,0,2,0,100,3,0,50,0,0,11,8362,1,0,0,0,0,1,0,0,0,0,0,0,0},
{4299,0,3,0,2,0,100,3,0,15,0,0,25,1,0,0,0,0,0,7,0,0,0,0,0,0,0},
{1840,0,7,0,0,0,100,1,1000,3000,0,0,1,4,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{1842,0,14,0,52,0,100,1,4,1842,0,0,53,1,9500024,0,0,0,2,1,0,0,0,0,0,0,0},
{1842,0,15,0,6,0,100,1,0,0,0,0,45,1,1,0,0,0,0,19,95109,0,0,0,0,0,0},
{1842,0,12,0,38,0,100,1,1,2,0,0,1,3,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{1842,0,13,0,38,0,100,1,1,3,0,0,1,4,3000,0,0,0,0,7,0,0,0,0,0,0,0},
{1842,0,10,0,40,0,100,1,13,9500016,0,0,1,2,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{1842,0,11,0,52,0,100,1,2,1842,0,0,45,1,1,0,0,0,0,19,95108,0,0,0,0,0,0},
{15192,0,0,0,20,0,100,0,60027,0,0,0,12,95059,1,300000,0,0,0,1,0,0,0,0,0,0,0},
{29611,0,5,0,2,0,100,0,0,95,12000,15000,11,4987,2,0,0,0,0,1,0,0,0,0,0,0,0},
{15192,0,1,0,20,0,100,0,60032,0,0,0,12,95059,1,300000,0,0,0,1,0,0,0,0,0,0,0},
{95051,0,0,0,0,0,100,0,15000,20000,20000,25000,12,95051,1,120000,0,0,0,2,0,0,0,0,0,0,0},
{95053,0,0,1,38,0,100,0,1,1,0,0,12,15818,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95053,0,10,0,61,0,100,0,0,0,0,0,12,95056,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95053,0,1,2,61,0,100,0,0,0,0,0,12,95056,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95053,0,3,4,61,0,100,0,0,0,0,0,12,95056,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95053,0,9,10,61,0,100,0,0,0,0,0,12,95056,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95053,0,8,9,61,0,100,0,0,0,0,0,12,95056,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95053,0,7,8,61,0,100,0,0,0,0,0,12,95056,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95053,0,6,7,61,0,100,0,0,0,0,0,12,95056,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95053,0,5,6,61,0,100,0,0,0,0,0,12,95056,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95053,0,4,5,61,0,100,0,0,0,0,0,12,95056,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95053,0,2,3,61,0,100,0,0,0,0,0,12,95056,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95054,0,0,0,1,0,100,1,10,20,0,0,53,1,9600004,0,0,0,2,1,0,0,0,0,0,0,0},
{95054,0,1,0,0,0,50,0,5000,10000,15000,20000,11,71147,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95054,0,2,0,0,0,50,0,5000,10000,15000,20000,11,37102,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95054,0,3,0,0,0,50,0,5000,10000,15000,20000,11,25744,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95054,0,4,0,0,0,100,0,10000,10000,10000,10000,12,95056,1,360000,0,0,0,2,0,0,0,0,0,0,0},
{95055,0,4,0,0,0,100,0,10000,15000,10000,15000,12,95056,1,360000,0,0,0,2,0,0,0,0,0,0,0},
{95055,0,3,0,0,0,50,0,5000,10000,15000,20000,11,25744,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95055,0,2,0,0,0,50,0,5000,10000,15000,20000,11,37102,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95055,0,1,0,0,0,50,0,5000,10000,15000,20000,11,71147,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95055,0,0,0,1,0,100,1,10,20,0,0,53,1,9600002,0,0,0,2,1,0,0,0,0,0,0,0},
{95056,0,1,0,0,0,100,0,5000,5000,5000,5000,12,11728,1,300000,0,0,0,2,0,0,0,0,0,0,0},
{95056,0,0,0,1,0,100,1,50,100,0,0,53,1,9600003,0,0,0,2,1,0,0,0,0,0,0,0},
{95057,0,0,1,38,0,100,0,1,1,0,0,12,95054,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95057,0,1,2,61,0,100,0,0,0,0,0,12,95056,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95057,0,2,3,61,0,100,0,0,0,0,0,12,95056,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95057,0,3,4,61,0,100,0,0,0,0,0,12,95056,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95057,0,4,5,61,0,100,0,0,0,0,0,12,95056,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95057,0,5,6,61,0,100,0,0,0,0,0,12,95056,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95057,0,6,7,61,0,100,0,0,0,0,0,12,95056,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95057,0,7,8,61,0,100,0,0,0,0,0,12,95056,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95057,0,8,9,61,0,100,0,0,0,0,0,12,95056,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95057,0,9,10,61,0,100,0,0,0,0,0,12,95056,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95057,0,10,0,61,0,100,0,0,0,0,0,12,95056,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95058,0,0,1,38,0,100,0,1,1,0,0,12,95055,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95058,0,1,2,61,0,100,0,0,0,0,0,12,95056,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95058,0,2,3,61,0,100,0,0,0,0,0,12,95056,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95058,0,3,4,61,0,100,0,0,0,0,0,12,95056,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95058,0,4,5,61,0,100,0,0,0,0,0,12,95056,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95058,0,5,6,61,0,100,0,0,0,0,0,12,95056,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95058,0,6,7,61,0,100,0,0,0,0,0,12,95056,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95058,0,7,8,61,0,100,0,0,0,0,0,12,95056,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95058,0,8,9,61,0,100,0,0,0,0,0,12,95056,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95058,0,9,10,61,0,100,0,0,0,0,0,12,95056,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95058,0,10,0,61,0,100,0,0,0,0,0,12,95056,1,3600000,0,0,0,1,0,0,0,0,0,0,0},
{95059,0,5,0,61,0,100,1,0,0,0,0,1,4,0,0,0,0,0,1,0,0,0,0,0,0,0},
{95059,0,4,5,61,0,100,1,0,0,0,0,1,3,0,0,0,0,0,1,0,0,0,0,0,0,0},
{95059,0,3,4,61,0,100,1,0,0,0,0,1,2,0,0,0,0,0,1,0,0,0,0,0,0,0},
{95059,0,0,0,1,0,100,1,50,100,0,0,53,0,9600005,0,0,0,1,1,0,0,0,0,0,0,0},
{95059,0,1,2,40,0,100,1,3,0,0,0,54,300000,0,0,0,0,0,1,0,0,0,0,0,0,0},
{95059,0,2,3,61,0,100,1,0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0},
{95061,0,2,3,61,0,100,0,0,0,0,0,11,95011,0,0,0,0,0,7,0,0,0,0,0,0,0},
{95061,0,4,0,38,0,100,0,1,1,0,0,1,1,3000,0,0,0,0,7,0,0,0,0,0,0,0},
{95061,0,3,0,61,0,100,0,0,0,0,0,44,2,0,0,0,0,0,7,0,0,0,0,0,0,0},
{95063,0,3,0,61,0,100,0,0,0,0,0,45,1,3,0,0,0,0,19,31412,0,0,0,0,0,0},
{95063,0,2,3,52,0,100,0,2,95063,0,0,45,1,1,0,0,0,0,19,32363,0,0,0,0,0,0},
{95063,0,0,0,38,0,100,0,1,1,0,0,1,1,3000,0,0,0,0,7,0,0,0,0,0,0,0},
{95063,0,1,0,52,0,100,0,1,95063,0,0,1,2,3000,0,0,0,0,7,0,0,0,0,0,0,0},
{95064,0,28,0,0,0,50,0,1000,7000,5000,10000,11,75418,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95064,0,27,0,0,0,50,0,3000,4000,3000,4000,12,95076,1,600000,0,0,0,2,0,0,0,0,0,0,0},
{95064,0,0,1,19,0,100,0,13377,0,0,0,45,1,1,0,0,0,0,19,95067,0,0,0,0,0,0},
{95064,0,1,2,61,0,100,0,0,0,0,0,45,1,1,0,0,0,0,19,95066,0,0,0,0,0,0},
{95064,0,2,3,61,0,100,0,0,0,0,0,45,1,1,0,0,0,0,19,95071,0,0,0,0,0,0},
{95064,0,3,4,61,0,100,0,0,0,0,0,45,1,1,0,0,0,0,19,95072,0,0,0,0,0,0},
{95064,0,4,5,61,0,100,0,0,0,0,0,45,1,1,0,0,0,0,19,95073,0,0,0,0,0,0},
{95064,0,5,6,61,0,100,0,0,0,0,0,53,0,9500007,0,0,0,2,1,0,0,0,0,0,0,0},
{95064,0,6,0,61,0,100,0,0,0,0,0,1,1,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95064,0,7,8,40,0,100,0,15,0,0,0,54,5000,0,0,0,0,0,1,0,0,0,0,0,0,0},
{95064,0,8,0,61,0,100,0,0,0,0,0,1,2,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95064,0,9,10,40,0,100,0,24,0,0,0,54,5000,0,0,0,0,0,1,0,0,0,0,0,0,0},
{95064,0,10,11,61,0,100,0,0,0,0,0,1,3,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95064,0,11,0,61,0,100,0,0,0,0,0,45,1,1,0,0,0,0,19,95070,0,0,0,0,0,0},
{95064,0,14,15,61,0,100,0,0,0,0,0,1,5,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95064,0,15,16,61,0,100,0,0,0,0,0,45,1,1,0,0,0,0,19,95068,0,0,0,0,0,0},
{95064,0,12,0,38,0,100,0,1,1,0,0,1,4,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95064,0,16,0,61,0,100,0,0,0,0,0,45,1,2,0,0,0,0,19,95067,0,0,0,0,0,0},
{95064,0,18,19,40,0,100,1,40,0,0,0,53,1,9500009,0,0,0,2,1,0,0,0,0,0,0,0},
{95064,0,19,20,61,0,100,0,0,0,0,0,45,1,2,0,0,0,0,19,95066,0,0,0,0,0,0},
{95064,0,20,21,61,0,100,0,0,0,0,0,45,1,2,0,0,0,0,19,95071,0,0,0,0,0,0},
{95064,0,25,0,0,0,50,0,3000,5000,5000,10000,11,41056,2,0,0,0,0,2,0,0,0,0,0,0,0},
{95064,0,26,0,0,0,100,0,1000,2000,15000,20000,11,60509,2,0,0,0,0,1,0,0,0,0,0,0,0},
{95064,0,13,14,40,0,100,0,39,0,0,0,54,15000,0,0,0,0,0,1,0,0,0,0,0,0,0},
{95064,0,21,22,61,0,100,0,0,0,0,0,45,1,2,0,0,0,0,19,95072,0,0,0,0,0,0},
{95064,0,22,0,61,0,100,0,0,0,0,0,45,1,2,0,0,0,0,19,95073,0,0,0,0,0,0},
{95064,0,23,0,38,0,100,1,1,2,0,0,12,95074,1,60,0,0,0,2,0,0,0,0,0,0,0},
{95064,0,24,0,0,0,50,0,1000,2000,5000,10000,11,59688,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95065,0,0,0,20,0,100,0,13371,0,0,0,44,2,0,0,0,0,0,7,0,0,0,0,0,0,0},
{95066,0,0,0,38,0,100,1,1,1,0,0,53,0,9500006,0,0,0,2,1,0,0,0,0,0,0,0},
{95066,0,1,0,40,0,100,0,15,0,0,0,54,5000,0,0,0,0,0,1,0,0,0,0,0,0,0},
{95066,0,2,0,40,0,100,0,24,0,0,0,54,5000,0,0,0,0,0,1,0,0,0,0,0,0,0},
{95066,0,3,0,38,0,100,1,1,2,0,0,53,1,9500009,0,0,0,2,1,0,0,0,0,0,0,0},
{95066,0,4,0,0,0,50,0,1000,3000,5000,10000,11,43153,2,0,0,0,0,2,0,0,0,0,0,0,0},
{95066,0,5,0,0,0,50,0,1000,5000,5000,10000,11,73075,2,0,0,0,0,2,0,0,0,0,0,0,0},
{95067,0,0,0,38,0,100,0,1,1,0,0,53,0,9500008,0,0,0,2,1,0,0,0,0,0,0,0},
{95067,0,1,0,40,0,100,0,15,0,0,0,54,5000,0,0,0,0,0,1,0,0,0,0,0,0,0},
{95067,0,6,0,0,0,100,0,4000,6000,4000,6000,11,64653,2,0,0,0,0,2,0,0,0,0,0,0,0},
{95067,0,5,0,0,0,50,0,10000,10000,10000,10000,11,20681,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95067,0,4,0,0,0,100,0,200,1000,200,1000,11,71504,0,0,0,0,0,2,0,0,0,0,0,0,0},
{95067,0,3,0,38,0,100,0,1,2,0,0,1,1,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95067,0,2,0,40,0,100,0,24,0,0,0,54,5000,0,0,0,0,0,1,0,0,0,0,0,0,0},
{95068,0,0,0,38,0,100,0,1,1,0,0,1,1,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95068,0,1,0,2,0,100,1,0,50,0,0,45,1,2,0,0,0,0,19,95064,0,0,0,0,0,0},
{95068,0,2,0,0,0,100,0,4000,6000,4000,6000,11,68588,2,0,0,0,0,2,0,0,0,0,0,0,0},
{95068,0,3,0,0,0,100,0,1000,3000,5000,7000,11,64390,2,0,0,0,0,2,0,0,0,0,0,0,0},
{95068,0,4,0,0,0,100,0,1000,2000,40000,40000,12,95077,1,600000,0,0,0,2,0,0,0,0,0,0,0},
{95068,0,5,0,0,0,100,0,1000,3000,15000,20000,11,68105,2,0,0,0,0,2,0,0,0,0,0,0,0},
{95068,0,6,0,0,0,100,0,4000,5000,4000,5000,12,95069,1,600000,0,0,0,2,0,0,0,0,0,0,0},
{95068,0,7,0,0,0,100,0,1000,2000,15000,20000,11,64670,2,0,0,0,0,1,0,0,0,0,0,0,0},
{95069,0,0,0,0,0,100,0,2000,4000,5000,6000,11,70361,2,0,0,0,0,2,0,0,0,0,0,0,0},
{95070,0,6,0,0,0,50,0,10000,15000,10000,15000,11,40504,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95070,0,5,0,0,0,50,0,5000,7000,5000,7000,11,71413,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95070,0,4,0,0,0,100,0,1000,3000,1000,3000,11,73027,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95070,0,3,0,0,0,50,0,9000,13000,9000,13000,11,69540,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95070,0,2,0,61,0,100,0,0,0,0,0,15,13377,0,0,0,0,0,18,100,0,0,0,0,0,0},
{95070,0,1,2,6,0,100,0,0,0,0,0,45,1,1,0,0,0,0,19,95064,0,0,0,0,0,0},
{95070,0,0,0,38,0,100,0,1,1,0,0,1,1,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95070,0,7,0,0,0,100,0,1000,3000,1000,3000,11,54098,2,0,0,0,0,2,0,0,0,0,0,0,0},
{95071,0,6,0,0,0,50,0,1000,5000,5000,10000,11,73075,2,0,0,0,0,2,0,0,0,0,0,0,0},
{95071,0,0,0,38,0,100,1,1,1,0,0,53,0,9500006,0,0,0,2,1,0,0,0,0,0,0,0},
{95071,0,1,0,40,0,100,0,15,0,0,0,54,5000,0,0,0,0,0,1,0,0,0,0,0,0,0},
{95071,0,2,0,40,0,100,0,24,0,0,0,54,5000,0,0,0,0,0,1,0,0,0,0,0,0,0},
{95071,0,4,0,38,0,100,1,1,2,0,0,53,1,9500009,0,0,0,2,1,0,0,0,0,0,0,0},
{95071,0,5,0,0,0,50,0,1000,3000,5000,10000,11,43153,2,0,0,0,0,2,0,0,0,0,0,0,0},
{95072,0,0,0,38,0,100,1,1,1,0,0,53,0,9500006,0,0,0,2,1,0,0,0,0,0,0,0},
{95072,0,1,0,40,0,100,0,15,0,0,0,54,5000,0,0,0,0,0,1,0,0,0,0,0,0,0},
{95072,0,2,0,40,0,100,0,24,0,0,0,54,5000,0,0,0,0,0,1,0,0,0,0,0,0,0},
{95072,0,4,0,38,0,100,1,1,2,0,0,53,1,9500009,0,0,0,2,1,0,0,0,0,0,0,0},
{95072,0,5,0,0,0,50,0,1000,3000,5000,10000,11,43153,2,0,0,0,0,2,0,0,0,0,0,0,0},
{95072,0,6,0,0,0,50,0,1000,5000,5000,10000,11,73075,2,0,0,0,0,2,0,0,0,0,0,0,0},
{95073,0,5,0,0,0,50,0,1000,3000,5000,10000,11,43153,2,0,0,0,0,2,0,0,0,0,0,0,0},
{95073,0,4,0,38,0,100,1,1,2,0,0,53,1,9500009,0,0,0,2,1,0,0,0,0,0,0,0},
{95073,0,2,0,40,0,100,0,24,0,0,0,54,5000,0,0,0,0,0,1,0,0,0,0,0,0,0},
{95073,0,1,0,40,0,100,0,15,0,0,0,54,5000,0,0,0,0,0,1,0,0,0,0,0,0,0},
{95073,0,0,0,38,0,100,1,1,1,0,0,53,0,9500006,0,0,0,2,1,0,0,0,0,0,0,0},
{95073,0,6,0,0,0,50,0,1000,3000,5000,10000,11,73075,2,0,0,0,0,2,0,0,0,0,0,0,0},
{95074,0,2,0,0,0,100,0,5000,7000,0,0,11,95014,2,0,0,0,0,18,100,0,0,0,0,0,0},
{95075,0,0,0,20,0,100,0,13377,0,0,0,44,1,0,0,0,0,0,18,100,0,0,0,0,0,0},
{95076,0,0,0,0,0,50,0,1000,3000,5000,10000,11,43153,2,0,0,0,0,2,0,0,0,0,0,0,0},
{95076,0,1,0,0,0,50,0,1000,3000,5000,10000,11,73075,2,0,0,0,0,2,0,0,0,0,0,0,0},
{95077,0,0,0,0,0,100,0,4000,5000,5000,6000,11,71155,2,0,0,0,0,2,0,0,0,0,0,0,0},
{95078,0,0,0,0,0,50,0,3000,5000,3000,5000,11,71549,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95078,0,1,0,38,0,100,0,1,1,0,0,53,1,9500010,0,0,0,2,1,0,0,0,0,0,0,0},
{95079,0,1,0,38,0,100,0,1,1,0,0,53,1,9500010,0,0,0,2,1,0,0,0,0,0,0,0},
{95079,0,0,0,0,0,50,0,3000,5000,3000,5000,11,71549,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95080,0,0,0,38,0,100,0,1,1,0,0,1,1,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{95080,0,1,0,52,0,100,1,1,95080,0,0,45,1,1,0,0,0,0,19,37846,0,0,0,0,0,0},
{95081,0,0,0,0,0,50,0,3000,5000,3000,5000,11,71549,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95081,0,1,0,38,0,100,0,1,1,0,0,53,1,9500010,0,0,0,2,1,0,0,0,0,0,0,0},
{95082,0,0,0,0,0,50,0,3000,5000,3000,5000,11,71549,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95082,0,1,0,38,0,100,0,1,1,0,0,53,1,9500010,0,0,0,2,1,0,0,0,0,0,0,0},
{95083,0,0,0,0,0,50,0,3000,5000,3000,5000,11,71549,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95083,0,1,0,38,0,100,0,1,1,0,0,53,1,9500011,0,0,0,2,1,0,0,0,0,0,0,0},
{95084,0,0,0,0,0,50,0,3000,5000,3000,5000,11,71549,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95084,0,1,0,38,0,100,0,1,1,0,0,53,1,9500011,0,0,0,2,1,0,0,0,0,0,0,0},
{95085,0,0,0,0,0,50,0,3000,5000,3000,5000,11,71549,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95085,0,1,0,38,0,100,0,1,1,0,0,53,1,9500011,0,0,0,2,1,0,0,0,0,0,0,0},
{95086,0,0,0,0,0,50,0,3000,5000,3000,5000,11,71549,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95086,0,1,0,38,0,100,0,1,1,0,0,53,1,9500011,0,0,0,2,1,0,0,0,0,0,0,0},
{95087,0,0,0,0,0,100,0,3000,6000,9000,12000,11,29915,32,0,0,0,0,5,0,0,0,0,0,0,0},
{95087,0,2,0,0,0,100,0,8000,14000,19000,24000,11,54703,0,0,0,0,0,2,0,0,0,0,0,0,0},
{95087,0,4,5,2,0,100,0,0,30,90000,90000,11,54701,1,0,0,0,0,1,0,0,0,0,0,0,0},
{95087,0,5,0,61,0,100,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
{95088,0,0,0,1,0,100,0,1000,1000,0,0,11,27793,0,0,0,0,0,1,0,0,0,0,0,0,0},
{95088,0,1,0,0,0,100,0,5000,9300,15200,15200,11,27794,0,0,0,0,0,2,0,0,0,0,0,0,0},
{95088,0,2,0,0,0,100,0,4800,10700,14000,19000,11,27758,1,0,0,0,0,1,0,0,0,0,0,0,0},
{95088,0,4,0,12,0,100,0,0,20,35000,43000,11,7160,1,0,0,0,0,7,0,0,0,0,0,0,0},
{95088,0,5,0,0,0,50,0,3000,8000,3000,8000,11,52029,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95088,0,6,0,6,0,50,0,0,0,0,0,45,1,1,0,0,0,0,19,37205,0,0,0,0,0,0},
{95089,0,1,0,0,0,100,0,0,0,4600,7300,11,55334,1,0,0,0,0,6,0,0,0,0,0,0,0},
{95089,0,11,12,6,0,100,0,0,0,0,0,45,1,3,0,0,0,0,19,37205,0,0,0,0,0,0},
{95089,0,7,0,0,0,100,0,2000,4000,2000,4000,12,95087,1,60000,0,0,0,2,0,0,0,0,0,0,0},
{95089,0,8,0,0,0,100,1,100,500,0,0,1,1,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95089,0,9,0,52,0,100,1,1,95089,0,0,45,1,2,0,0,0,0,19,37205,0,0,0,0,0,0},
{95089,0,10,0,38,0,100,1,1,2,0,0,1,2,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95089,0,5,0,0,0,100,0,4700,6100,10700,12800,11,55336,0,0,0,0,0,1,0,0,0,0,0,0,0},
{95089,0,3,0,0,0,100,0,1100,2200,4100,6200,11,55331,1,0,0,0,0,5,0,0,0,0,0,0,0},
{95090,0,0,0,38,0,100,0,1,1,0,0,12,95089,1,60000,0,0,0,1,0,0,0,0,0,0,0},
{95091,0,0,0,64,0,100,0,0,0,0,0,98,60006,80005,0,0,0,0,7,0,0,0,0,0,0,0},
{95091,0,7,0,52,0,100,0,3,95091,0,0,1,4,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95091,0,1,2,62,0,100,0,60006,0,0,0,72,0,0,0,0,0,0,7,0,0,0,0,0,0,0},
{95091,0,2,3,61,0,100,0,0,0,0,0,11,95021,2,0,0,0,0,7,0,0,0,0,0,0,0},
{95091,0,3,0,61,0,100,0,0,0,0,0,44,1,0,0,0,0,0,7,0,0,0,0,0,0,0},
{95091,0,4,0,38,0,100,0,1,1,0,0,1,1,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95091,0,5,0,52,0,100,0,1,95091,0,0,1,2,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95091,0,6,0,52,0,100,0,2,95091,0,0,1,3,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95092,0,3,0,52,0,100,0,2,95092,0,0,45,1,2,0,0,0,0,19,95099,0,0,0,0,0,0},
{95092,0,2,0,38,0,100,0,1,2,0,0,1,2,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95092,0,0,0,38,0,100,0,1,1,0,0,1,1,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95092,0,1,0,52,0,100,0,1,95092,0,0,45,1,2,0,0,0,0,19,95093,0,0,0,0,0,0},
{95093,0,4,0,40,0,100,1,3,0,0,0,45,1,2,0,0,0,0,19,95100,0,0,0,0,0,0},
{95093,0,3,0,52,0,100,1,2,95093,0,0,53,0,9500012,0,0,0,0,1,0,0,0,0,0,0,0},
{95093,0,2,0,38,0,100,0,1,2,0,0,1,2,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95093,0,0,0,38,0,100,0,1,1,0,0,1,1,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95093,0,1,0,52,0,100,0,1,95093,0,0,45,1,1,0,0,0,0,19,95092,0,0,0,0,0,0},
{95094,0,0,0,10,0,100,0,1,25,3000,4000,1,1,3000,0,0,0,0,7,0,0,0,0,0,0,0},
{95095,0,0,0,10,0,100,0,1,25,3000,4000,1,1,3000,0,0,0,0,7,0,0,0,0,0,0,0},
{95096,0,0,0,10,0,100,0,1,25,3000,4000,1,1,3000,0,0,0,0,7,0,0,0,0,0,0,0},
{95097,0,0,0,10,0,100,0,1,25,3000,4000,1,1,3000,0,0,0,0,7,0,0,0,0,0,0,0},
{95098,0,1,0,52,0,100,0,1,95098,0,0,45,1,2,0,0,0,0,19,95092,0,0,0,0,0,0},
{95098,0,0,0,38,0,100,0,1,1,0,0,1,1,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95099,0,3,0,52,0,100,0,2,95099,0,0,45,1,1,0,0,0,0,19,95091,0,0,0,0,0,0},
{95099,0,2,0,38,0,100,0,1,2,0,0,1,2,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95099,0,0,0,38,0,100,0,1,1,0,0,1,1,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95099,0,1,0,52,0,100,0,1,95099,0,0,45,1,1,0,0,0,0,19,95093,0,0,0,0,0,0},
{95100,0,0,0,10,0,100,1,1,25,1000,2000,45,1,1,0,0,0,0,19,95099,0,0,0,0,0,0},
{95100,0,1,0,38,0,100,0,1,2,0,0,12,95101,1,20000,0,0,0,1,0,0,0,0,0,0,0},
{95101,0,1,0,6,0,100,0,0,0,0,0,45,1,1,0,0,0,0,19,95098,0,0,0,0,0,0},
{95101,0,0,0,0,0,100,0,20,30,1000,2000,11,40434,2,0,0,0,0,2,0,0,0,0,0,0,0},
{95102,0,0,0,38,0,100,1,1,1,0,0,12,95103,1,60000,0,0,0,1,0,0,0,0,0,0,0},
{95103,0,8,0,61,0,100,1,0,0,0,0,1,3,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95103,0,1,2,52,0,100,1,1,95103,0,0,45,1,1,0,0,0,0,19,3976,0,0,0,0,0,0},
{95103,0,7,8,61,0,100,1,0,0,0,0,51,0,0,0,0,0,0,19,3977,0,0,0,0,0,0},
{95103,0,0,0,1,0,100,1,2000,2000,0,0,1,1,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95103,0,6,7,61,0,100,1,0,0,0,0,51,0,0,0,0,0,0,19,3976,0,0,0,0,0,0},
{95103,0,5,6,61,0,100,1,0,0,0,0,11,68141,2,0,0,0,0,19,3976,0,0,0,0,0,0},
{95103,0,2,0,61,0,100,1,0,0,0,0,53,0,9500013,0,0,0,0,1,0,0,0,0,0,0,0},
{95103,0,3,0,40,0,100,1,2,9500013,0,0,1,2,10000,0,0,0,0,1,0,0,0,0,0,0,0},
{95103,0,4,5,40,0,100,1,3,9500013,0,0,45,1,2,0,0,0,0,19,3976,0,0,0,0,0,0},
{95104,0,0,0,38,0,100,1,1,1,0,0,1,1,2000,0,0,0,0,1,0,0,0,0,0,0,0},
{95104,0,1,0,52,0,100,1,1,95104,0,0,53,0,9500017,0,0,0,1,1,0,0,0,0,0,0,0},
{95105,0,0,0,38,0,100,1,1,1,0,0,1,1,2000,0,0,0,0,1,0,0,0,0,0,0,0},
{95105,0,1,0,52,0,100,1,1,95105,0,0,53,0,9500018,0,0,0,1,1,0,0,0,0,0,0,0},
{95106,0,1,0,52,0,100,1,1,95106,0,0,53,0,9500019,0,0,0,1,1,0,0,0,0,0,0,0},
{95106,0,0,0,38,0,100,1,1,1,0,0,1,1,2000,0,0,0,0,1,0,0,0,0,0,0,0},
{95107,0,2,0,40,0,100,1,1,0,0,0,45,1,1,0,0,0,0,19,1842,0,0,0,0,0,0},
{95107,0,0,0,38,0,100,1,1,1,0,0,1,1,2000,0,0,0,0,1,0,0,0,0,0,0,0},
{95107,0,1,0,52,0,100,1,1,95107,0,0,53,0,9500020,0,0,0,1,1,0,0,0,0,0,0,0},
{95108,0,4,0,61,0,100,0,0,0,0,0,12,95113,1,600000,0,0,0,1,0,0,0,0,0,0,0},
{95108,0,0,1,38,0,100,0,1,1,0,0,12,1840,1,600000,0,0,0,1,0,0,0,0,0,0,0},
{95108,0,1,2,61,0,100,0,0,0,0,0,12,95110,1,600000,0,0,0,1,0,0,0,0,0,0,0},
{95108,0,2,3,61,0,100,0,0,0,0,0,12,95111,1,600000,0,0,0,1,0,0,0,0,0,0,0},
{95108,0,3,4,61,0,100,0,0,0,0,0,12,95112,1,600000,0,0,0,1,0,0,0,0,0,0,0},
{95109,0,0,0,38,0,100,1,1,1,0,0,12,95114,1,120000,0,0,0,1,0,0,0,0,0,0,0},
{95110,0,2,0,0,0,50,0,3000,5000,3000,5000,11,14518,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95110,0,0,0,1,0,100,1,50,100,0,0,53,0,9500021,0,0,0,2,1,0,0,0,0,0,0,0},
{95110,0,1,0,0,0,100,0,50,100,15000,20000,11,8990,1,0,0,0,0,1,0,0,0,0,0,0,0},
{95110,0,3,0,0,0,50,0,3000,5000,3000,5000,11,17143,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95111,0,3,0,0,0,50,0,3000,5000,3000,5000,11,17143,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95111,0,2,0,0,0,50,0,3000,5000,3000,5000,11,14518,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95111,0,1,0,0,0,100,0,50,100,15000,20000,11,8990,1,0,0,0,0,1,0,0,0,0,0,0,0},
{95111,0,0,0,1,0,100,1,50,100,0,0,53,0,9500021,0,0,0,2,1,0,0,0,0,0,0,0},
{95112,0,3,0,0,0,50,0,3000,5000,3000,5000,11,17143,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95112,0,2,0,0,0,50,0,3000,5000,3000,5000,11,14518,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95112,0,1,0,0,0,100,0,50,100,15000,20000,11,8990,1,0,0,0,0,1,0,0,0,0,0,0,0},
{95112,0,0,0,1,0,100,1,50,100,0,0,53,0,9500023,0,0,0,2,1,0,0,0,0,0,0,0},
{95113,0,3,0,0,0,50,0,3000,5000,3000,5000,11,17143,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95113,0,2,0,0,0,50,0,3000,5000,3000,5000,11,14518,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95113,0,1,0,0,0,100,0,50,100,15000,20000,11,8990,1,0,0,0,0,1,0,0,0,0,0,0,0},
{95113,0,0,0,1,0,100,1,50,100,0,0,53,0,9500023,0,0,0,2,1,0,0,0,0,0,0,0},
{95114,0,0,0,1,0,100,1,50,100,0,0,53,1,9500025,0,0,0,2,1,0,0,0,0,0,0,0},
{95114,0,1,0,40,0,100,1,3,9500025,0,0,1,1,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95114,0,2,3,52,0,100,1,1,95114,0,0,1,2,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{95114,0,3,0,61,0,100,0,0,0,0,0,17,18,0,0,0,0,0,1,0,0,0,0,0,0,0},
{95114,0,4,0,52,0,100,1,2,95114,0,0,1,3,10000,0,0,0,0,1,0,0,0,0,0,0,0},
{95114,0,6,0,52,0,100,1,4,95114,0,0,15,5944,0,0,0,0,0,18,50,0,0,0,0,0,0},
{95114,0,7,0,0,0,50,0,3000,5000,3000,5000,11,71122,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95114,0,8,0,0,0,50,0,3000,5000,3000,5000,11,53385,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95114,0,5,0,52,0,100,1,3,95114,0,0,1,4,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95115,0,5,0,5,0,100,1,0,0,0,0,1,2,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95115,0,4,0,0,0,100,1,500,1000,0,0,1,1,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95115,0,3,0,0,0,50,0,2000,4000,2000,4000,11,14518,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95115,0,2,0,0,0,50,0,2000,4000,2000,4000,11,5589,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95115,0,1,0,0,0,100,0,30,50,10000,10000,11,8990,2,0,0,0,0,1,0,0,0,0,0,0,0},
{95118,0,0,0,38,0,100,1,1,1,0,0,12,95119,1,50000,0,0,0,1,0,0,0,0,0,0,0},
{95119,0,8,0,52,0,100,1,4,95119,0,0,1,5,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{95119,0,0,0,1,0,100,1,50,100,0,0,53,0,9500027,0,0,0,0,1,0,0,0,0,0,0,0},
{95119,0,1,2,40,0,100,1,1,9500027,0,0,54,3000,0,0,0,0,0,1,0,0,0,0,0,0,0},
{95119,0,7,0,52,0,100,1,3,95119,0,0,1,4,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{95119,0,6,0,52,0,100,1,2,95119,0,0,1,3,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{95119,0,5,0,38,0,100,1,1,1,0,0,1,2,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95119,0,2,0,61,0,100,1,0,0,0,0,45,1,1,0,0,0,0,19,31412,0,0,0,0,0,0},
{95119,0,3,0,40,0,100,1,2,9500027,0,0,1,1,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95119,0,4,0,52,0,100,1,1,95119,0,0,45,1,2,0,0,0,0,19,31412,0,0,0,0,0,0},
{95120,0,0,0,38,0,100,1,1,1,0,0,1,0,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95120,0,1,0,52,0,100,1,0,95120,0,0,1,1,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95120,0,2,0,52,0,100,1,1,95120,0,0,1,2,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95120,0,3,0,52,0,100,1,2,95120,0,0,1,3,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{95120,0,4,0,52,0,100,1,3,95120,0,0,1,4,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{95120,0,5,0,52,0,100,1,4,95120,0,0,1,5,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95120,0,6,0,52,0,100,1,5,95120,0,0,1,6,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95120,0,36,0,0,0,100,0,15000,20000,20000,25000,12,95138,1,150000,0,0,0,2,0,0,0,0,0,0,0},
{95120,0,35,0,0,0,100,0,2000,5000,2000,5000,12,95122,1,100000,0,0,0,2,0,0,0,0,0,0,0},
{95120,0,33,0,0,0,100,0,1000,2000,20000,25000,11,61212,1,0,0,0,0,1,0,0,0,0,0,0,0},
{95120,0,32,0,0,0,100,0,3000,5000,3000,5000,11,75362,2,0,0,0,0,2,0,0,0,0,0,0,0},
{95120,0,31,0,0,0,100,0,1000,2000,2000,2000,11,59684,0,0,0,0,0,2,0,0,0,0,0,0,0},
{95120,0,29,30,61,0,100,1,0,0,0,0,45,1,4,0,0,0,0,19,95121,0,0,0,0,0,0},
{95120,0,7,0,52,0,100,1,6,95120,0,0,1,7,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95120,0,8,9,52,0,100,1,7,95120,0,0,53,0,9500029,0,0,30000,2,1,0,0,0,0,0,0,0},
{95120,0,28,29,52,0,100,1,13,95120,0,0,45,1,3,0,0,0,0,19,31649,0,0,0,0,0,0},
{95120,0,27,0,61,0,100,1,0,0,0,0,1,13,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95120,0,11,0,40,0,100,1,8,9500029,0,0,45,1,1,0,0,0,0,19,32521,0,0,0,0,0,0},
{95120,0,26,27,61,0,100,1,0,0,0,0,45,1,1,0,0,0,0,20,500007,0,0,0,0,0,0},
{95120,0,22,23,61,0,100,1,0,0,0,0,45,1,1,0,0,0,0,20,500003,0,0,0,0,0,0},
{95120,0,21,22,52,0,100,1,12,95120,0,0,11,52869,4,0,0,0,0,1,0,0,0,0,0,0,0},
{95120,0,23,24,61,0,100,1,0,0,0,0,45,1,1,0,0,0,0,20,500004,0,0,0,0,0,0},
{95120,0,25,26,61,0,100,1,0,0,0,0,45,1,1,0,0,0,0,20,500006,0,0,0,0,0,0},
{95120,0,30,0,61,0,100,1,0,0,0,0,41,5000,0,0,0,0,0,1,0,0,0,0,0,0,0},
{95120,0,9,10,61,0,100,1,0,0,0,0,45,1,1,0,0,0,0,19,95121,0,0,0,0,0,0},
{95120,0,14,15,61,0,100,1,0,0,0,0,45,1,2,0,0,0,0,19,95121,0,0,0,0,0,0},
{95120,0,24,25,61,0,100,1,0,0,0,0,45,1,1,0,0,0,0,20,500005,0,0,0,0,0,0},
{95120,0,10,0,61,0,100,1,0,0,0,0,45,1,1,0,0,0,0,19,31649,0,0,0,0,0,0},
{95120,0,12,0,38,0,100,1,1,2,0,0,1,8,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95120,0,13,14,52,0,100,1,8,95120,0,0,45,1,2,0,0,0,0,19,31649,0,0,0,0,0,0},
{95120,0,15,16,61,0,100,1,0,0,0,0,53,0,9500032,0,0,0,2,1,0,0,0,0,0,0,0},
{95120,0,16,0,61,0,100,1,0,0,0,0,45,1,2,0,0,0,0,19,32521,0,0,0,0,0,0},
{95120,0,17,0,38,0,100,1,1,3,0,0,1,9,2000,0,0,0,0,1,0,0,0,0,0,0,0},
{95120,0,18,0,40,0,100,1,14,9500032,0,0,1,10,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95120,0,19,0,52,0,100,1,10,95120,0,0,45,1,3,0,0,0,0,19,95121,0,0,0,0,0,0},
{95120,0,20,0,38,0,100,1,1,4,0,0,1,11,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95120,0,21,0,52,0,100,1,11,95120,0,0,1,12,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95121,0,8,0,0,0,100,0,7000,10000,7000,10000,12,95140,1,80000,0,0,0,2,0,0,0,0,0,0,0},
{95121,0,7,0,0,0,50,0,6000,8000,6000,8000,11,71889,2,0,0,0,0,2,0,0,0,0,0,0,0},
{95121,0,6,0,0,0,100,0,800,1500,800,1500,11,59713,0,0,0,0,0,2,0,0,0,0,0,0,0},
{95121,0,4,0,38,0,100,1,1,4,0,0,41,5000,0,0,0,0,0,1,0,0,0,0,0,0,0},
{95121,0,3,0,52,0,100,1,1,95121,0,0,45,1,4,0,0,0,0,19,95120,0,0,0,0,0,0},
{95121,0,2,0,38,0,100,1,1,3,0,0,1,1,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95121,0,1,0,38,0,100,1,1,2,0,0,53,0,9500031,0,0,0,2,1,0,0,0,0,0,0,0},
{95121,0,0,0,38,0,100,1,1,1,0,0,53,0,9500028,0,0,0,2,1,0,0,0,0,0,0,0},
{95122,0,0,0,0,0,100,0,1000,5000,1000,5000,11,70361,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95123,0,4,0,0,0,50,0,5000,15000,5000,15000,11,36700,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95123,0,3,0,38,0,100,1,1,4,0,0,53,0,9500052,0,0,0,2,1,0,0,0,0,0,0,0},
{95123,0,2,0,38,0,100,1,1,3,0,0,53,0,9500040,0,0,0,2,1,0,0,0,0,0,0,0},
{95123,0,1,0,38,0,100,1,1,2,0,0,53,0,9500037,0,0,0,2,1,0,0,0,0,0,0,0},
{95123,0,5,0,0,0,50,0,10000,15000,10000,15000,11,71133,2,0,0,0,0,7,0,0,0,0,0,0,0},
{95123,0,0,0,38,0,100,1,1,1,0,0,53,0,9500034,0,0,0,2,1,0,0,0,0,0,0,0},
{95123,0,6,0,0,0,100,0,8000,13000,8000,13000,12,95139,1,3000,0,0,0,2,0,0,0,0,0,0,0},
{95124,0,26,27,61,0,100,1,0,0,0,0,45,1,1,0,0,0,0,20,500015,0,0,0,0,0,0},
{95124,0,27,28,61,0,100,1,0,0,0,0,45,1,1,0,0,0,0,20,500016,0,0,0,0,0,0},
{95124,0,28,29,61,0,100,1,0,0,0,0,45,1,1,0,0,0,0,20,500017,0,0,0,0,0,0},
{95124,0,29,30,61,0,100,1,0,0,0,0,45,1,1,0,0,0,0,20,500018,0,0,0,0,0,0},
{95124,0,24,25,61,0,100,1,0,0,0,0,45,1,1,0,0,0,0,20,500013,0,0,0,0,0,0},
{95124,0,6,0,38,0,100,1,1,1,0,0,1,1,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95124,0,17,0,40,0,100,1,19,9500038,0,0,1,4,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95124,0,23,24,61,0,100,1,0,0,0,0,45,1,1,0,0,0,0,20,500012,0,0,0,0,0,0},
{95124,0,7,0,52,0,100,1,1,95124,0,0,45,1,2,0,0,0,0,19,95125,0,0,0,0,0,0},
{95124,0,8,0,38,0,100,1,1,2,0,0,53,0,9500038,0,0,0,2,1,1,0,0,0,0,0,0},
{95124,0,14,0,38,0,100,1,1,3,0,0,1,2,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95124,0,15,0,52,0,100,1,2,95124,0,0,1,3,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95124,0,18,0,52,0,100,1,4,95124,0,0,1,5,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95124,0,25,26,61,0,100,1,0,0,0,0,45,1,1,0,0,0,0,20,500014,0,0,0,0,0,0},
{95124,0,19,20,52,0,100,1,5,95124,0,0,11,52869,4,0,0,0,0,1,0,0,0,0,0,0,0},
{95124,0,20,21,61,0,100,1,0,0,0,0,45,1,1,0,0,0,0,20,500009,0,0,0,0,0,0},
{95124,0,21,22,61,0,100,1,0,0,0,0,45,1,1,0,0,0,0,20,500010,0,0,0,0,0,0},
{95124,0,74,0,0,0,100,0,4000,6000,4000,6000,12,95122,1,3000,0,0,0,2,0,0,0,0,0,0,0},
{95124,0,73,0,0,0,100,0,11000,18000,11000,18000,12,95138,1,3000,0,0,0,2,0,0,0,0,0,0,0},
{95124,0,72,0,0,0,100,0,1000,2000,25000,30000,11,61212,2,0,0,0,0,1,0,0,0,0,0,0,0},
{95124,0,30,31,61,0,100,1,0,0,0,0,45,1,1,0,0,0,0,20,500019,0,0,0,0,0,0},
{95124,0,4,0,61,0,100,1,0,0,0,0,45,1,1,0,0,0,0,19,95125,0,0,0,0,0,0},
{95124,0,71,0,0,0,50,0,3000,5000,3000,5000,11,75362,2,0,0,0,0,2,0,0,0,0,0,0,0},
{95124,0,70,0,0,0,50,0,1000,3000,1000,3000,11,59684,0,0,0,0,0,2,0,0,0,0,0,0,0},
{95124,0,46,0,52,0,100,1,7,95124,0,0,1,8,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95124,0,47,0,52,0,100,1,8,95124,0,0,44,8,0,0,0,0,0,18,100,0,0,0,0,0,0},
{95124,0,0,0,64,0,100,0,0,0,0,0,98,60025,80024,0,0,0,0,7,0,0,0,0,0,0,0},
{95124,0,41,0,38,0,100,1,1,4,0,0,53,0,9500051,0,0,0,2,1,0,0,0,0,0,0,0},
{95124,0,45,0,38,0,100,1,1,5,0,0,1,7,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95124,0,31,32,61,0,100,1,0,0,0,0,45,1,1,0,0,0,0,20,500020,0,0,0,0,0,0},
{95124,0,32,0,61,0,100,1,0,0,0,0,1,6,8000,0,0,0,0,1,1,0,0,0,0,0,0},
{95124,0,33,34,52,0,100,1,6,95124,0,0,45,1,3,0,0,0,0,19,95123,0,0,0,0,0,0},
{95124,0,34,35,61,0,100,1,0,0,0,0,45,1,3,0,0,0,0,19,95125,0,0,0,0,0,0},
{95124,0,35,0,61,0,100,1,0,0,0,0,53,0,9500041,0,0,0,2,1,1,0,0,0,0,0,0},
{95124,0,40,0,40,0,100,1,10,9500041,0,0,45,1,1,0,0,0,0,19,31565,0,0,0,0,0,0},
{95124,0,22,23,61,0,100,1,0,0,0,0,45,1,1,0,0,0,0,20,500011,0,0,0,0,0,0},
{95124,0,16,0,40,0,100,1,17,9500038,0,0,45,1,1,0,0,0,0,19,95127,0,0,0,0,0,0},
{95124,0,2,3,61,0,100,1,0,0,0,0,53,0,9500035,0,0,0,2,1,0,0,0,0,0,0,0},
{95124,0,3,4,61,0,100,1,0,0,0,0,45,1,1,0,0,0,0,19,95123,0,0,0,0,0,0},
{95124,0,1,2,62,0,100,1,60025,0,0,0,72,0,0,0,0,0,0,7,0,0,0,0,0,0,0},
{95125,0,0,0,38,0,100,1,1,1,0,0,53,0,9500036,0,0,0,2,1,0,0,0,0,0,0,0},
{95125,0,1,0,40,0,100,1,2,9500036,0,0,1,1,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95125,0,17,0,0,0,50,0,5000,10000,5000,10000,11,71889,2,0,0,0,0,2,0,0,0,0,0,0,0},
{95125,0,16,0,0,0,100,0,800,1500,800,1500,11,59713,0,0,0,0,0,2,0,0,0,0,0,0,0},
{95125,0,11,0,38,0,100,1,1,3,0,0,53,0,9500042,0,0,0,2,1,0,0,0,0,0,0,0},
{95125,0,10,0,40,0,100,0,15,9500039,0,0,1,6,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95125,0,9,0,5,0,100,0,10000,15000,0,0,1,5,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95125,0,2,0,52,0,100,1,1,95125,0,0,1,2,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95125,0,3,0,52,0,100,1,2,95125,0,0,1,3,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95125,0,4,0,52,0,100,1,3,95125,0,0,45,1,1,0,0,0,0,19,95124,0,0,0,0,0,0},
{95125,0,12,0,38,0,100,1,1,4,0,0,53,0,9500050,0,0,0,2,1,0,0,0,0,0,0,0},
{95125,0,8,0,61,0,100,1,0,0,0,0,45,1,2,0,0,0,0,19,95123,0,0,0,0,0,0},
{95125,0,7,8,61,0,100,1,0,0,0,0,45,1,2,0,0,0,0,19,95124,0,0,0,0,0,0},
{95125,0,6,7,52,0,100,1,4,95125,0,0,53,0,9500039,0,0,0,2,1,0,0,0,0,0,0,0},
{95125,0,5,0,38,0,100,1,1,2,0,0,1,4,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95125,0,18,0,0,0,100,0,7000,10000,7000,10000,12,95140,1,3000,0,0,0,2,0,0,0,0,0,0,0},
{95126,0,3,0,0,0,100,0,7000,12000,7000,12000,11,48144,2,0,0,0,0,2,0,0,0,0,0,0,0},
{95126,0,0,0,6,0,100,1,0,0,0,0,45,1,3,0,0,0,0,19,95124,0,0,0,0,0,0},
{95126,0,1,0,0,0,50,0,4000,8000,4000,8000,11,61078,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95126,0,2,0,0,0,100,0,7000,10000,7000,10000,12,95141,1,3000,0,0,0,2,0,0,0,0,0,0,0},
{95127,0,0,0,38,0,100,1,1,1,0,0,1,1,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95129,0,1,0,52,0,100,1,1,95129,0,0,45,1,2,0,0,0,0,19,31565,0,0,0,0,0,0},
{95129,0,0,0,38,0,100,1,1,1,0,0,1,1,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95137,0,0,0,0,0,100,1,1000,2000,0,0,1,1,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95137,0,11,0,52,0,100,1,3,95137,0,0,44,16,0,0,0,0,0,18,100,0,0,0,0,0,0},
{95137,0,10,0,61,0,100,1,0,0,0,0,1,3,8000,0,0,0,0,1,0,0,0,0,0,0,0},
{95137,0,9,10,61,0,100,1,0,0,0,0,45,1,1,0,0,0,0,19,95136,0,0,0,0,0,0},
{95137,0,8,9,61,0,100,1,0,0,0,0,45,1,2,0,0,0,0,19,95135,0,0,0,0,0,0},
{95137,0,7,8,61,0,100,1,0,0,0,0,45,1,2,0,0,0,0,19,95134,0,0,0,0,0,0},
{95137,0,6,7,61,0,100,1,0,0,0,0,45,1,2,0,0,0,0,19,95133,0,0,0,0,0,0},
{95137,0,5,6,61,0,100,1,0,0,0,0,45,1,2,0,0,0,0,19,95132,0,0,0,0,0,0},
{95137,0,4,5,61,0,100,1,0,0,0,0,45,1,2,0,0,0,0,19,95131,0,0,0,0,0,0},
{95137,0,3,4,61,0,100,1,0,0,0,0,45,1,2,0,0,0,0,19,95130,0,0,0,0,0,0},
{95137,0,2,3,52,0,100,1,2,95137,0,0,11,33395,4,0,0,0,0,2,0,0,0,0,0,0,0},
{95137,0,1,0,52,0,100,1,1,95137,0,0,1,2,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95138,0,0,0,0,0,50,0,2000,4000,2000,4000,11,13496,2,0,0,0,0,2,0,0,0,0,0,0,0},
{95138,0,1,0,0,0,50,0,5000,10000,5000,10000,11,55426,2,0,0,0,0,2,0,0,0,0,0,0,0},
{95139,0,1,0,0,0,50,0,50,100,5000,7000,11,62614,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95139,0,0,0,0,0,50,0,2000,5000,2000,5000,11,70189,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95140,0,0,0,0,0,100,0,3000,6000,3000,6000,11,70428,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95141,0,0,0,0,0,50,0,3000,7000,3000,7000,11,67059,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95143,0,2,0,0,0,50,0,10000,15000,10000,15000,11,71133,2,0,0,0,0,1,0,0,0,0,0,0,0},
{95143,0,3,0,0,0,100,0,8000,13000,8000,13000,12,95139,1,3000,0,0,0,2,0,0,0,0,0,0,0},
{95143,0,1,0,0,0,50,0,5000,15000,5000,15000,11,36700,1,0,0,0,0,2,0,0,0,0,0,0,0},
{95144,0,1,0,0,0,50,0,1000,3000,1000,3000,11,59684,0,0,0,0,0,2,0,0,0,0,0,0,0},
{95144,0,2,0,0,0,50,0,3000,5000,3000,5000,11,75362,2,0,0,0,0,2,0,0,0,0,0,0,0},
{95144,0,3,0,0,0,100,0,1000,2000,25000,30000,11,61212,2,0,0,0,0,1,0,0,0,0,0,0,0},
{95144,0,15,0,52,0,100,1,2,95144,0,0,1,3,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95144,0,14,0,38,0,100,1,1,1,0,0,1,2,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95144,0,13,0,52,0,100,1,1,95144,0,0,45,1,1,0,0,0,0,19,95145,0,0,0,0,0,0},
{95144,0,12,0,61,0,100,1,0,0,0,0,1,1,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{95144,0,11,12,62,0,100,1,60026,0,0,0,72,0,0,0,0,0,0,7,0,0,0,0,0,0,0},
{95144,0,10,0,64,0,100,0,0,0,0,0,98,60026,80025,0,0,0,0,7,0,0,0,0,0,0,0},
{95144,0,5,0,0,0,100,0,4000,6000,4000,6000,12,95122,1,3000,0,0,0,2,0,0,0,0,0,0,0},
{95144,0,4,0,0,0,100,0,11000,18000,11000,18000,12,95138,1,3000,0,0,0,2,0,0,0,0,0,0,0},
{95144,0,16,0,52,0,100,1,3,95144,0,0,45,1,1,0,0,0,0,19,95128,0,0,0,0,0,0},
{95145,0,11,0,52,0,100,1,1,95145,0,0,45,1,1,0,0,0,0,19,95144,0,0,0,0,0,0},
{95145,0,10,0,38,0,100,1,1,1,0,0,1,1,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{95145,0,3,0,0,0,100,0,7000,10000,7000,10000,12,95140,1,3000,0,0,0,2,0,0,0,0,0,0,0},
{95145,0,2,0,0,0,50,0,5000,10000,5000,10000,11,71889,2,0,0,0,0,2,0,0,0,0,0,0,0},
{95145,0,1,0,0,0,100,0,800,1500,800,1500,11,59713,0,0,0,0,0,2,0,0,0,0,0,0,0},
{95146,0,8,0,38,0,100,1,1,5,0,0,1,5,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{95146,0,0,0,38,0,100,1,1,1,0,0,1,1,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{95146,0,1,0,52,0,100,1,1,95146,0,0,45,1,2,0,0,0,0,19,95148,0,0,0,0,0,0},
{95146,0,7,0,52,0,100,1,4,95146,0,0,45,1,5,0,0,0,0,19,95148,0,0,0,0,0,0},
{95146,0,6,0,38,0,100,1,1,4,0,0,1,4,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{95146,0,2,0,38,0,100,1,1,2,0,0,1,2,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{95146,0,3,0,52,0,100,1,2,95146,0,0,45,1,3,0,0,0,0,19,95148,0,0,0,0,0,0},
{95146,0,4,0,38,0,100,1,1,3,0,0,1,3,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{95146,0,5,0,52,0,100,1,3,95146,0,0,45,1,4,0,0,0,0,19,95148,0,0,0,0,0,0},
{95147,0,10,0,61,0,100,1,0,0,0,0,44,1,0,0,0,0,0,7,0,0,0,0,0,0,0},
{95147,0,9,10,61,0,100,1,0,0,0,0,11,95024,2,0,0,0,0,7,0,0,0,0,0,0,0},
{95147,0,8,9,62,0,100,0,60027,1,0,0,72,0,0,0,0,0,0,7,0,0,0,0,0,0,0},
{95147,0,0,0,64,0,100,0,0,0,0,0,98,60027,80026,0,0,0,0,7,0,0,0,0,0,0,0},
{95147,0,1,2,62,0,100,0,60027,0,0,0,72,0,0,0,0,0,0,7,0,0,0,0,0,0,0},
{95147,0,2,0,61,0,100,1,0,0,0,0,1,1,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{95147,0,3,0,52,0,100,1,1,95147,0,0,1,2,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{95147,0,7,0,52,0,100,1,4,95147,0,0,45,1,1,0,0,0,0,19,95148,0,0,0,0,0,0},
{95147,0,6,0,38,0,100,1,1,1,0,0,1,4,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{95147,0,4,0,52,0,100,1,2,95147,0,0,1,3,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{95147,0,5,0,52,0,100,1,3,95147,0,0,45,1,1,0,0,0,0,19,32315,0,0,0,0,0,0},
{95148,0,9,0,52,0,100,1,5,95148,0,0,45,1,5,0,0,0,0,19,95146,0,0,0,0,0,0},
{95148,0,8,0,38,0,100,1,1,5,0,0,1,5,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{95148,0,7,0,52,0,100,1,4,95148,0,0,45,1,4,0,0,0,0,19,95146,0,0,0,0,0,0},
{95148,0,6,0,38,0,100,1,1,4,0,0,1,4,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{95148,0,0,0,38,0,100,1,1,1,0,0,1,1,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{95148,0,1,0,52,0,100,1,1,95148,0,0,45,1,1,0,0,0,0,19,95146,0,0,0,0,0,0},
{95148,0,2,0,38,0,100,1,1,2,0,0,1,2,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{95148,0,3,0,52,0,100,1,2,95148,0,0,45,1,2,0,0,0,0,19,95146,0,0,0,0,0,0},
{95148,0,5,0,52,0,100,1,3,95148,0,0,45,1,3,0,0,0,0,19,95146,0,0,0,0,0,0},
{95148,0,4,0,38,0,100,1,1,3,0,0,1,3,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{95149,0,0,0,38,0,100,1,1,1,0,0,1,1,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{95149,0,6,0,61,0,100,0,0,0,0,0,44,1,0,0,0,0,0,7,0,0,0,0,0,0,0},
{95149,0,5,6,61,0,100,0,0,0,0,0,11,95021,2,0,0,0,0,7,0,0,0,0,0,0,0},
{95149,0,1,0,52,0,100,1,1,95149,0,0,1,2,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{95149,0,2,0,52,0,100,1,2,95149,0,0,45,1,3,0,0,0,0,19,95150,0,0,0,0,0,0},
{95149,0,3,0,64,0,100,0,0,0,0,0,98,60006,80005,0,0,0,0,7,0,0,0,0,0,0,0},
{95149,0,4,5,62,0,100,0,60006,0,0,0,72,0,0,0,0,0,0,7,0,0,0,0,0,0,0},
{95150,0,5,0,52,0,100,1,4,95150,0,0,45,1,1,0,0,0,0,19,95149,0,0,0,0,0,0},
{95151,0,0,0,38,0,100,1,1,1,0,0,1,1,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95151,0,1,0,52,0,100,1,1,95151,0,0,45,1,1,0,0,0,0,19,95150,0,0,0,0,0,0},
{95151,0,2,0,38,0,100,1,1,2,0,0,1,2,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{95151,0,3,0,52,0,100,1,2,95151,0,0,1,3,5000,0,0,0,0,7,0,0,0,0,0,0,0},
{95151,0,4,0,52,0,100,1,3,95151,0,0,45,1,2,0,0,0,0,19,95150,0,0,0,0,0,0},
{95152,0,0,0,38,0,100,1,1,1,0,0,1,1,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{95152,0,1,0,52,0,100,1,1,95152,0,0,45,1,1,0,0,0,0,19,95151,0,0,0,0,0,0},
{15818,0,0,0,1,0,100,0,10,20,0,0,53,1,9600003,0,0,0,2,1,0,0,0,0,0,0,0},
{15818,0,1,0,0,0,50,0,5000,10000,15000,20000,11,71147,1,0,0,0,0,2,0,0,0,0,0,0,0},
{15818,0,2,0,0,0,50,0,5000,10000,15000,20000,11,37102,1,0,0,0,0,2,0,0,0,0,0,0,0},
{15818,0,3,0,0,0,50,0,5000,10000,15000,20000,11,25744,1,0,0,0,0,2,0,0,0,0,0,0,0},
{15818,0,4,0,0,0,100,0,10000,15000,10000,15000,12,95056,1,360000,0,0,0,2,0,0,0,0,0,0,0},
{15818,0,5,0,6,0,100,0,0,0,0,0,15,60027,0,0,0,0,0,18,100,0,0,0,0,0,0},
{15818,0,6,0,6,0,100,0,0,0,0,0,15,60032,0,0,0,0,0,18,100,0,0,0,0,0,0},
{15852,0,0,0,0,0,100,0,5000,10000,15000,20000,11,46968,2,0,0,0,0,2,0,0,0,0,0,0,0},
{15853,0,0,0,0,0,100,0,5000,10000,15000,20000,11,63808,2,0,0,0,0,2,0,0,0,0,0,0,0},
{15854,0,0,0,0,0,100,0,50,100,4000,5000,11,51842,2,0,0,0,0,2,0,0,0,0,0,0,0},
{15857,0,0,0,0,0,100,0,50,100,4000,5000,11,51842,2,0,0,0,0,2,0,0,0,0,0,0,0},
{15858,0,0,0,0,0,100,0,5000,10000,15000,20000,11,46968,2,0,0,0,0,2,0,0,0,0,0,0,0},
{15859,0,0,0,0,0,50,0,1000,2000,1000,2000,11,20420,1,0,0,0,0,2,0,0,0,0,0,0,0},
{15859,0,1,0,0,0,50,0,1000,2000,1000,2000,11,37279,1,0,0,0,0,2,0,0,0,0,0,0,0},
{15866,0,0,0,0,0,100,0,5000,10000,5000,10000,12,15859,1,300000,0,0,0,2,0,0,0,0,0,0,0},
{15868,0,0,0,0,0,100,0,3000,4000,3000,4000,12,15857,1,300000,0,0,0,2,0,0,0,0,0,0,0},
{15868,0,1,2,19,0,100,0,60027,0,0,0,45,1,1,0,0,0,0,19,95053,0,0,0,0,0,0},
{15868,0,2,3,61,0,100,0,0,0,0,0,45,1,1,0,0,0,0,19,95057,0,0,0,0,0,0},
{15868,0,3,0,61,0,100,0,0,0,0,0,45,1,1,0,0,0,0,19,95058,0,0,0,0,0,0},
{15868,0,4,0,0,0,100,0,2000,3000,2000,3000,11,46968,2,0,0,0,0,2,0,0,0,0,0,0,0},
{15870,0,0,0,0,0,100,0,5000,10000,5000,10000,12,15858,1,300000,0,0,0,2,0,0,0,0,0,0,0},
{15869,0,0,0,0,0,100,0,3000,5000,3000,5000,12,15853,1,300000,0,0,0,2,0,0,0,0,0,0,0},
{15869,0,1,2,19,0,100,0,60032,0,0,0,45,1,1,0,0,0,0,19,95053,0,0,0,0,0,0},
{15869,0,2,3,61,0,100,0,0,0,0,0,45,1,1,0,0,0,0,19,95057,0,0,0,0,0,0},
{15869,0,3,0,61,0,100,0,0,0,0,0,45,1,1,0,0,0,0,19,95058,0,0,0,0,0,0},
{15869,0,4,0,0,0,100,0,3000,5000,3000,5000,12,15854,1,300000,0,0,0,2,0,0,0,0,0,0,0},
{15869,0,5,0,0,0,100,0,2000,4000,2000,4000,11,63808,2,0,0,0,0,2,0,0,0,0,0,0,0},
{10955,0,0,0,0,0,100,0,1000,2000,3000,4000,11,12675,2,0,0,0,0,2,0,0,0,0,0,0,0},
{25256,0,0,0,1,0,100,0,0,0,300000,450000,80,2525600,2,0,0,0,0,1,0,0,0,0,0,0,0},
{25256,0,1,0,64,0,100,0,0,0,0,0,98,60024,80023,0,0,0,0,7,0,0,0,0,0,0,0},
{25256,0,2,3,62,0,100,0,60024,0,0,0,72,0,0,0,0,0,0,7,0,0,0,0,0,0,0},
{25256,0,3,4,61,0,100,0,0,0,0,0,11,95022,2,0,0,0,0,7,0,0,0,0,0,0,0},
{25256,0,4,0,61,0,100,0,0,0,0,0,44,4,0,0,0,0,0,7,0,0,0,0,0,0,0},
{31412,0,15,0,0,0,100,0,10000,15000,20000,25000,12,95138,1,300000,0,0,0,2,0,0,0,0,0,0,0},
{31412,0,14,0,0,0,100,0,2000,5000,2000,5000,12,95122,1,300000,0,0,0,2,0,0,0,0,0,0,0},
{31412,0,12,0,0,0,100,0,1000,2000,15000,20000,11,64670,2,0,0,0,0,1,0,0,0,0,0,0,0},
{31412,0,11,0,0,0,50,0,3000,5000,3000,5000,11,64390,1,0,0,0,0,2,0,0,0,0,0,0,0},
{31412,0,10,0,0,0,50,0,2000,4000,2000,4000,11,68588,1,0,0,0,0,2,0,0,0,0,0,0,0},
{31412,0,9,0,19,0,100,1,13266,0,0,0,50,500002,60,0,0,0,0,7,0,0,0,0,0,0,0},
{31412,0,8,0,52,0,100,1,5,31412,0,0,45,1,1,0,0,0,0,19,95119,0,0,0,0,0,0},
{31412,0,7,0,52,0,100,1,4,31412,0,0,1,5,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{31412,0,6,0,38,0,100,1,1,3,0,0,1,4,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{31412,0,5,0,52,0,100,1,3,31412,0,0,45,1,1,0,0,0,0,19,95063,0,0,0,0,0,0},
{31412,0,4,0,38,0,100,1,1,2,0,0,1,3,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{31412,0,3,0,52,0,100,1,1,31412,0,0,1,2,1000,0,0,0,0,1,0,0,0,0,0,0,0},
{31412,0,2,0,38,0,100,1,1,1,0,0,1,1,1000,0,0,0,0,1,0,0,0,0,0,0,0},
{31412,0,1,0,61,0,100,1,0,0,0,0,50,500001,50000,0,0,0,0,19,95118,0,0,0,0,0,0},
{31412,0,0,1,20,0,100,1,132570,0,0,0,45,1,1,0,0,0,0,19,95118,0,0,0,0,0,0},
{31516,0,0,0,0,0,100,0,1000,3000,3000,5000,11,70189,1,0,0,0,0,2,0,0,0,0,0,0,0},
{31531,0,0,0,0,0,100,0,2000,4000,2000,4000,11,55851,1,0,0,0,0,2,0,0,0,0,0,0,0},
{31532,0,0,0,0,0,100,0,50,100,10000,15000,11,71140,1,0,0,0,0,2,0,0,0,0,0,0,0},
{31649,0,0,0,19,0,100,1,13267,0,0,0,45,1,1,0,0,0,0,19,95120,0,0,0,0,0,0},
{31649,0,1,0,38,0,100,1,1,1,0,0,53,0,9500030,0,0,0,2,1,0,0,0,0,0,0,0},
{31649,0,2,0,38,0,100,1,1,2,0,0,53,0,9500033,0,0,0,2,1,0,0,0,0,0,0,0},
{31649,0,3,0,38,0,100,1,1,3,0,0,41,5000,0,0,0,0,0,1,0,0,0,0,0,0,0},
{31649,0,4,0,0,0,50,0,10000,15000,10000,15000,11,36700,1,0,0,0,0,2,0,0,0,0,0,0,0},
{31649,0,5,0,0,0,50,0,5000,10000,5000,10000,11,71133,2,0,0,0,0,7,0,0,0,0,0,0,0},
{31649,0,6,0,0,0,100,0,8000,13000,8000,13000,12,95139,1,120000,0,0,0,2,0,0,0,0,0,0,0},
{32363,0,0,1,20,0,100,0,13369,0,0,0,45,1,1,0,0,0,0,19,95061,0,0,0,0,0,0},
{32363,0,1,0,19,0,100,0,13370,0,0,0,1,1,3000,0,0,0,0,7,0,0,0,0,0,0,0},
{32363,0,2,0,64,0,100,0,0,0,0,0,98,60002,80001,0,0,0,0,7,0,0,0,0,0,0,0},
{32363,0,3,4,62,0,100,0,60002,0,0,0,72,0,0,0,0,0,0,7,0,0,0,0,0,0,0},
{32363,0,4,5,61,0,100,0,0,0,0,0,11,95012,0,0,0,0,0,7,0,0,0,0,0,0,0},
{32363,0,5,0,61,0,100,0,0,0,0,0,44,1,0,0,0,0,0,7,0,0,0,0,0,0,0},
{32363,0,6,0,38,0,100,0,1,1,0,0,1,2,0,0,0,0,0,7,0,0,0,0,0,0,0},
{32363,0,7,0,52,0,100,0,1,32363,0,0,45,1,1,0,0,0,0,19,95063,0,0,0,0,0,0},
{32521,0,0,1,38,0,100,1,1,1,0,0,50,181508,60000,0,0,0,0,1,0,0,0,0,0,0,0},
{32521,0,1,0,61,0,100,1,0,0,0,0,1,1,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{32521,0,2,0,52,0,100,1,1,32521,0,0,1,2,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{32521,0,3,0,52,0,100,1,2,32521,0,0,1,3,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{32521,0,4,5,52,0,100,1,3,32521,0,0,12,31844,1,300000,0,0,0,1,0,0,0,0,0,0,0},
{32521,0,5,0,61,0,100,1,0,0,0,0,45,1,2,0,0,0,0,19,95120,0,0,0,0,0,0},
{32521,0,6,0,38,0,100,1,1,2,0,0,41,30,0,0,0,0,0,1,0,0,0,0,0,0,0},
{36899,0,0,0,0,0,100,0,5000,6000,7000,11000,11,37102,1,0,0,0,0,2,0,0,0,0,0,0,0},
{37697,0,0,0,0,0,100,0,3000,5000,4000,5000,11,28405,1,0,0,0,0,2,0,0,0,0,0,0,0},
{31527,0,0,0,0,0,100,0,2000,6000,2000,6000,11,70361,1,0,0,0,0,2,0,0,0,0,0,0,0},
{31565,0,0,0,38,0,100,1,1,1,0,0,1,1,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{31565,0,1,0,52,0,100,1,1,31565,0,0,1,2,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{31565,0,2,0,52,0,100,1,2,31565,0,0,1,3,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{31565,0,3,0,52,0,100,1,3,31565,0,0,1,4,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{31565,0,4,5,52,0,100,1,4,31565,0,0,45,1,4,0,0,0,0,19,95123,0,0,0,0,0,0},
{31565,0,5,6,61,0,100,1,0,0,0,0,45,1,4,0,0,0,0,19,95124,0,0,0,0,0,0},
{31565,0,6,0,61,0,100,1,0,0,0,0,45,1,4,0,0,0,0,19,95125,0,0,0,0,0,0},
{31565,0,7,0,2,0,100,1,35,65,0,0,1,5,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{31565,0,8,0,52,0,100,1,5,31565,0,0,45,1,1,0,0,0,0,19,95129,0,0,0,0,0,0},
{31565,0,9,0,38,0,100,1,1,2,0,0,1,6,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{31565,0,10,11,6,0,100,1,0,0,0,0,1,7,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{31565,0,11,0,61,0,100,1,0,0,0,0,45,1,5,0,0,0,0,19,95124,0,0,0,0,0,0},
{31565,0,12,0,0,0,100,0,2000,4000,2000,4000,12,32269,1,300000,0,0,0,2,0,0,0,0,0,0,0},
{31565,0,13,0,0,0,50,0,3000,7000,3000,7000,11,63723,1,0,0,0,0,2,0,0,0,0,0,0,0},
{31565,0,14,0,0,0,50,0,500,1000,10000,15000,11,72327,1,0,0,0,0,2,0,0,0,0,0,0,0},
{31844,0,0,0,6,0,100,1,0,0,0,0,45,1,3,0,0,0,0,19,95120,0,0,0,0,0,0},
{31844,0,1,0,0,0,100,0,10000,20000,10000,20000,11,37102,2,0,0,0,0,2,0,0,0,0,0,0,0},
{31844,0,2,0,0,0,50,0,7000,11000,7000,11000,11,72272,1,0,0,0,0,2,0,0,0,0,0,0,0},
{31844,0,3,0,0,0,100,0,7000,9000,7000,9000,12,31516,1,3000,0,0,0,2,0,0,0,0,0,0,0},
{32315,0,1,0,38,0,100,1,1,1,0,0,1,1,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{32315,0,2,0,52,0,100,1,1,32315,0,0,1,2,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{32315,0,3,0,52,0,100,1,2,32315,0,0,1,3,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{32315,0,4,0,52,0,100,1,3,32315,0,0,45,1,1,0,0,0,0,19,95147,0,0,0,0,0,0},
{36624,0,0,0,20,0,100,1,24454,0,0,0,53,0,36624,0,0,0,0,1,0,0,0,0,0,0,0},
{36624,0,1,2,40,0,100,0,3,36624,0,0,54,90,0,0,0,0,0,1,0,0,0,0,0,0,0},
{36624,0,2,0,61,0,100,0,0,0,0,0,1,1,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{36624,0,3,0,52,0,100,0,1,36624,0,0,1,2,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{36624,0,4,0,52,0,100,0,2,36624,0,0,12,37846,1,120000,0,0,0,7,0,0,0,0,0,0,0},
{36624,0,5,0,38,0,100,0,1,1,0,0,1,3,300,0,0,0,0,1,0,0,0,0,0,0,0},
{37205,0,0,0,0,0,100,0,7000,12000,15000,16000,11,66006,2,0,0,0,0,2,0,0,0,0,0,0,0},
{37205,0,1,0,0,0,100,0,50,100,10000,15000,11,57774,1,0,0,0,0,2,0,0,0,0,0,0,0},
{37205,0,2,0,0,0,50,0,3000,5000,3000,5000,11,58822,1,0,0,0,0,2,0,0,0,0,0,0,0},
{37205,0,3,0,64,0,100,0,0,0,0,0,98,60003,80002,0,0,0,0,7,0,0,0,0,0,0,0},
{37205,0,4,5,62,0,100,0,60003,0,0,0,72,0,0,0,0,0,0,7,0,0,0,0,0,0,0},
{37205,0,5,6,61,0,100,1,0,0,0,0,53,1,9500010,0,0,0,2,1,0,0,0,0,0,0,0},
{37205,0,6,7,61,0,100,0,0,0,0,0,1,1,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{37205,0,7,8,61,0,100,0,0,0,0,0,45,1,1,0,0,0,0,19,95078,0,0,0,0,0,0},
{37205,0,8,9,61,0,100,0,0,0,0,0,45,1,1,0,0,0,0,19,95079,0,0,0,0,0,0},
{37205,0,9,10,61,0,100,0,0,0,0,0,45,1,1,0,0,0,0,19,95081,0,0,0,0,0,0},
{37205,0,10,11,61,0,100,0,0,0,0,0,45,1,1,0,0,0,0,19,95082,0,0,0,0,0,0},
{37205,0,11,12,61,0,100,0,0,0,0,0,45,1,1,0,0,0,0,19,95083,0,0,0,0,0,0},
{37205,0,12,13,61,0,100,0,0,0,0,0,45,1,1,0,0,0,0,19,95084,0,0,0,0,0,0},
{37205,0,13,14,61,0,100,0,0,0,0,0,45,1,1,0,0,0,0,19,95085,0,0,0,0,0,0},
{37205,0,14,0,61,0,100,0,0,0,0,0,45,1,1,0,0,0,0,19,95086,0,0,0,0,0,0},
{37205,0,15,16,62,0,100,0,60003,1,0,0,72,0,0,0,0,0,0,7,0,0,0,0,0,0,0},
{37205,0,16,0,61,0,100,0,0,0,0,0,44,1,0,0,0,0,0,7,0,0,0,0,0,0,0},
{37205,0,17,0,38,0,100,0,1,1,0,0,1,2,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{37205,0,18,0,52,0,100,0,2,37205,0,0,45,1,1,0,0,0,0,19,95090,0,0,0,0,0,0},
{37205,0,19,0,38,0,100,1,1,2,0,0,1,3,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{37205,0,20,0,52,0,100,1,3,37205,0,0,45,1,2,0,0,0,0,19,95089,0,0,0,0,0,0},
{37205,0,21,0,38,0,100,0,1,3,0,0,1,4,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{37552,0,0,0,64,0,100,0,0,0,0,0,98,60004,80003,0,0,0,0,7,0,0,0,0,0,0,0},
{37552,0,1,2,62,0,100,0,60004,0,0,0,72,0,0,0,0,0,0,7,0,0,0,0,0,0,0},
{37552,0,2,0,61,0,100,0,0,0,0,0,44,2,0,0,0,0,0,7,0,0,0,0,0,0,0},
{37846,0,0,0,1,0,100,1,1000,2000,0,0,45,1,1,0,0,0,0,19,95080,0,0,0,0,0,0},
{37846,0,1,0,38,0,100,0,1,1,0,0,1,1,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{37846,0,2,0,52,0,100,0,1,37846,0,0,1,2,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{37846,0,3,0,52,0,100,0,2,37846,0,0,1,3,10000,0,0,0,0,1,0,0,0,0,0,0,0},
{37846,0,4,0,52,0,100,0,3,37846,0,0,1,4,6000,0,0,0,0,1,0,0,0,0,0,0,0},
{37846,0,5,0,52,0,100,0,4,37846,0,0,1,5,8000,0,0,0,0,1,0,0,0,0,0,0,0},
{37846,0,6,0,52,0,100,0,5,37846,0,0,1,6,7000,0,0,0,0,1,0,0,0,0,0,0,0},
{37846,0,7,0,52,0,100,0,6,37846,0,0,1,7,10000,0,0,0,0,1,0,0,0,0,0,0,0},
{37846,0,8,0,52,0,100,0,7,37846,0,0,1,8,9000,0,0,0,0,1,0,0,0,0,0,0,0},
{37846,0,9,0,52,0,100,0,8,37846,0,0,1,9,13000,0,0,0,0,1,0,0,0,0,0,0,0},
{37846,0,10,0,52,0,100,0,9,37846,0,0,1,10,10000,0,0,0,0,1,0,0,0,0,0,0,0},
{37846,0,11,0,52,0,100,0,10,37846,0,0,1,11,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{37846,0,12,0,52,0,100,1,11,37846,0,0,45,1,1,0,0,0,0,19,36624,0,0,0,0,0,0},
{38056,0,0,0,10,0,100,1,1,30,1000,2000,1,1,3000,0,0,0,0,7,0,0,0,0,0,0,0},
{38056,0,1,0,52,0,100,1,1,38056,0,0,45,1,1,0,0,0,0,19,95152,0,0,0,0,0,0},
{1840,0,0,0,1,0,100,1,50,100,0,0,1,1,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{1840,0,1,0,52,0,100,1,1,1840,0,0,53,0,9500022,0,0,0,2,1,0,0,0,0,0,0,0},
{1840,0,2,0,40,0,100,0,2,9500022,0,0,45,1,2,0,0,0,0,19,1842,0,0,0,0,0,0},
{1840,0,3,0,40,0,100,0,3,9500022,0,0,1,2,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{1840,0,4,0,52,0,100,0,2,1840,0,0,1,3,5000,0,0,0,0,1,0,0,0,0,0,0,0},
{1840,0,5,0,52,0,100,0,3,1840,0,0,1,4,3000,0,0,0,0,1,0,0,0,0,0,0,0},
{1840,0,6,0,52,0,100,0,4,1840,0,0,45,1,3,0,0,0,0,19,1842,0,0,0,0,0,0},
{4302,0,4,5,24,0,100,1,28282,1,0,0,2,35,0,0,0,0,0,1,0,0,0,0,0,0,0},
{4302,0,6,0,61,0,100,1,0,0,0,0,1,1,1000,0,0,0,0,1,0,0,0,0,0,0,0},
{4302,0,7,0,52,0,100,1,1,4302,0,0,5,16,0,0,0,0,0,1,0,0,0,0,0,0,0},
{4299,0,4,5,24,0,100,1,28282,1,0,0,2,35,0,0,0,0,0,1,0,0,0,0,0,0,0},
{4299,0,6,0,61,0,100,1,0,0,0,0,1,1,1000,0,0,0,0,1,0,0,0,0,0,0,0},
{4299,0,7,0,52,0,100,1,1,4299,0,0,5,16,0,0,0,0,0,1,0,0,0,0,0,0,0},
{4300,0,0,0,0,0,100,2,7000,9000,42000,49000,11,2601,1,0,0,0,0,1,0,0,0,0,0,0,0},
{4300,0,1,0,0,0,100,2,3500,4500,6500,9500,11,8439,0,0,0,0,0,1,0,0,0,0,0,0,0},
{4300,0,2,0,2,0,100,3,0,15,0,0,25,1,0,0,0,0,0,7,0,0,0,0,0,0,0},
{4300,0,4,5,24,0,100,1,28282,1,0,0,2,35,0,0,0,0,0,1,0,0,0,0,0,0,0},
{4301,0,2,0,61,0,100,1,0,0,0,0,1,1,1000,0,0,0,0,1,0,0,0,0,0,0,0},
{4301,0,3,0,52,0,100,1,1,4301,0,0,5,16,0,0,0,0,0,1,0,0,0,0,0,0,0},
{4303,0,0,1,2,0,100,3,0,30,0,0,11,8269,0,0,0,0,0,1,0,0,0,0,0,0,0},
{4303,0,1,0,61,0,100,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0},
{4303,0,2,0,0,0,65,2,17500,17500,40000,42500,11,6064,0,0,0,0,0,1,0,0,0,0,0,0,0},
{4303,0,3,0,4,0,100,3,0,0,0,0,11,1006,0,0,0,0,0,1,0,0,0,0,0,0,0},
{4303,0,4,0,2,0,100,3,0,20,0,0,11,8362,0,0,0,0,0,1,0,0,0,0,0,0,0},
{4303,0,5,6,24,0,100,1,28282,1,0,0,2,35,0,0,0,0,0,1,0,0,0,0,0,0,0},
{4303,0,7,0,61,0,100,1,0,0,0,0,1,2,1000,0,0,0,0,1,0,0,0,0,0,0,0},
{4303,0,8,0,52,0,100,1,2,4303,0,0,5,16,0,0,0,0,0,1,0,0,0,0,0,0,0},
{4540,0,0,0,0,0,100,2,5000,5000,15000,30000,11,11978,0,0,0,0,0,2,0,0,0,0,0,0,0},
{4540,0,1,0,0,0,100,2,10000,10000,20000,30000,11,3391,0,0,0,0,0,1,0,0,0,0,0,0,0},
{4540,0,4,5,24,0,100,1,28282,1,0,0,2,35,0,0,0,0,0,1,0,0,0,0,0,0,0},
{4540,0,6,0,61,0,100,1,0,0,0,0,1,1,1000,0,0,0,0,1,0,0,0,0,0,0,0},
{4540,0,7,0,52,0,100,1,1,4540,0,0,5,16,0,0,0,0,0,1,0,0,0,0,0,0,0},
{15693,0,0,1,20,0,100,1,60025,0,0,0,1,1,0,0,0,0,0,7,0,0,0,0,0,0,0},
{29611,0,4,0,0,0,100,0,11000,15000,12000,16000,11,10308,2,0,0,0,0,6,0,0,0,0,0,0,0},
{15693,0,1,2,61,0,100,1,0,0,0,0,1,2,0,0,0,0,0,7,0,0,0,0,0,0,0},
{29611,0,3,0,0,0,100,0,3000,3000,7000,8000,11,48819,2,0,0,0,0,2,0,0,0,0,0,0,0},
{15693,0,2,0,61,0,100,1,0,0,0,0,1,3,0,0,0,0,0,7,0,0,0,0,0,0,0},
{29611,0,2,0,0,0,100,0,8000,10000,12000,19000,11,20066,0,0,0,0,0,6,0,0,0,0,0,0,0},
{15693,0,3,4,20,0,100,1,60030,0,0,0,1,1,0,0,0,0,0,7,0,0,0,0,0,0,0},
{15693,0,4,5,61,0,100,1,0,0,0,0,1,2,0,0,0,0,0,7,0,0,0,0,0,0,0},
{29611,0,1,0,0,0,100,1,0,0,0,0,11,54043,32,0,0,0,0,1,0,0,0,0,0,0,0},
{15693,0,5,0,61,0,100,1,0,0,0,0,1,3,0,0,0,0,0,7,0,0,0,0,0,0,0},
{29611,0,0,0,0,0,100,0,5000,5000,4000,4500,11,35395,2,0,0,0,0,2,0,0,0,0,0,0,0},
{29611,0,6,0,0,0,100,0,0,0,20000,22000,11,48827,2,0,0,0,0,2,0,0,0,0,0,0,0},
{29611,0,7,0,0,0,100,0,1000,1000,600000,600000,11,53736,2,0,0,0,0,1,0,0,0,0,0,0,0},
{29611,0,8,0,2,0,100,0,20,50,10000,10000,11,31884,0,0,0,0,0,1,0,0,0,0,0,0,0},
{29611,0,9,0,0,0,100,0,3000,5000,10000,10500,11,53385,2,0,0,0,0,2,0,0,0,0,0,0,0},
{29611,0,10,0,0,0,100,0,5000,6000,15000,16000,11,31804,2,0,0,0,0,2,0,0,0,0,0,0,0},
{29611,0,11,0,2,0,100,1,0,80,0,0,11,48788,0,0,0,0,0,1,0,0,0,0,0,0,0},
{29611,0,12,0,3,0,100,0,0,50,15000,15000,11,54428,0,0,0,0,0,1,0,0,0,0,0,0,0},
{29611,0,13,0,0,0,100,1,1000,1000,0,0,11,71193,2,0,0,0,0,1,0,0,0,0,0,0,0},
{29611,0,14,0,2,0,100,0,0,30,14000,14000,11,69638,0,0,0,0,0,1,0,0,0,0,0,0,0},
{29611,0,15,0,19,0,100,0,13369,0,0,0,1,1,3000,0,0,0,0,7,0,0,0,0,0,0,0},
{29611,0,16,0,52,0,100,0,1,29611,0,0,45,1,2,0,0,0,0,19,95061,0,0,0,0,0,0},
{29611,0,17,0,52,0,100,0,1,29611,0,0,1,2,0,0,0,0,0,7,0,0,0,0,0,0,0},
{29611,0,18,0,19,0,100,0,13371,0,0,0,50,500000,30000,0,0,0,0,7,0,0,0,0,0,0,0},
{500003,1,0,0,38,0,100,1,1,1,0,0,44,2,0,0,0,0,0,1,0,0,0,0,0,0,0},
{500004,1,0,0,38,0,100,1,1,1,0,0,44,2,0,0,0,0,0,1,0,0,0,0,0,0,0},
{500005,1,0,0,38,0,100,1,1,1,0,0,44,2,0,0,0,0,0,1,0,0,0,0,0,0,0},
{500006,1,0,0,38,0,100,1,1,1,0,0,44,2,0,0,0,0,0,1,0,0,0,0,0,0,0},
{500007,1,0,0,38,0,100,1,1,1,0,0,44,2,0,0,0,0,0,1,0,0,0,0,0,0,0},
{37527,0,15,16,19,0,100,0,24595,0,0,0,11,95020,2,0,0,0,0,7,0,0,0,0,0,0,0},
{500009,1,0,0,38,0,100,1,1,1,0,0,44,2,0,0,0,0,0,1,0,0,0,0,0,0,0},
{500010,1,0,0,38,0,100,1,1,1,0,0,44,2,0,0,0,0,0,1,0,0,0,0,0,0,0},
{500011,1,0,0,38,0,100,1,1,1,0,0,44,2,0,0,0,0,0,1,0,0,0,0,0,0,0},
{500012,1,0,0,38,0,100,1,1,1,0,0,44,2,0,0,0,0,0,1,0,0,0,0,0,0,0},
{500013,1,0,0,38,0,100,1,1,1,0,0,44,2,0,0,0,0,0,1,0,0,0,0,0,0,0},
{500014,1,0,0,38,0,100,1,1,1,0,0,44,2,0,0,0,0,0,1,0,0,0,0,0,0,0},
{500015,1,0,0,38,0,100,1,1,1,0,0,44,2,0,0,0,0,0,1,0,0,0,0,0,0,0},
{500016,1,0,0,38,0,100,1,1,1,0,0,44,2,0,0,0,0,0,1,0,0,0,0,0,0,0},
{500017,1,0,0,38,0,100,1,1,1,0,0,44,2,0,0,0,0,0,1,0,0,0,0,0,0,0},
{500018,1,0,0,38,0,100,1,1,1,0,0,44,2,0,0,0,0,0,1,0,0,0,0,0,0,0},
{500019,1,0,0,38,0,100,1,1,1,0,0,44,2,0,0,0,0,0,1,0,0,0,0,0,0,0},
{500020,1,0,0,38,0,100,1,1,1,0,0,44,2,0,0,0,0,0,1,0,0,0,0,0,0,0},
{37527,0,11,0,61,0,100,0,0,0,0,0,44,4,0,0,0,0,0,7,0,0,0,0,0,0,0},
{37527,0,10,11,19,0,100,0,24594,0,0,0,11,95020,2,0,0,0,0,7,0,0,0,0,0,0,0},
{37527,0,5,6,19,0,100,0,24564,0,0,0,11,95020,2,0,0,0,0,7,0,0,0,0,0,0,0},
{37527,0,6,0,61,0,100,0,0,0,0,0,44,2,0,0,0,0,0,7,0,0,0,0,0,0,0},
{37527,0,2,0,61,0,100,0,0,0,0,0,44,2,0,0,0,0,0,7,0,0,0,0,0,0,0},
{37527,0,1,2,19,0,100,0,24553,0,0,0,11,95020,2,0,0,0,0,7,0,0,0,0,0,0,0},
{37527,0,16,0,61,0,100,0,0,0,0,0,44,2,0,0,0,0,0,7,0,0,0,0,0,0,0}
};


SmartWaypointMgr* SmartWaypointMgr::instance()
{
    static SmartWaypointMgr instance;
    return &instance;
}

void SmartWaypointMgr::LoadFromDB()
{
    uint32 oldMSTime = getMSTime();

    for (std::unordered_map<uint32, WPPath*>::iterator itr = waypoint_map.begin(); itr != waypoint_map.end(); ++itr)
    {
        for (WPPath::iterator pathItr = itr->second->begin(); pathItr != itr->second->end(); ++pathItr)
            delete pathItr->second;

        delete itr->second;
    }

    waypoint_map.clear();

    PreparedStatement* stmt = WorldDatabase.GetPreparedStatement(WORLD_SEL_SMARTAI_WP);
    PreparedQueryResult result = WorldDatabase.Query(stmt);

    if (!result)
    {
        TC_LOG_INFO("server.loading", ">> Loaded 0 SmartAI Waypoint Paths. DB table `waypoints` is empty.");

        return;
    }

    uint32 count = 0;
    uint32 total = 0;
    uint32 last_entry = 0;
    uint32 last_id = 1;

    do
    {
        Field* fields = result->Fetch();
        uint32 entry = fields[0].GetUInt32();
        uint32 id = fields[1].GetUInt32();
        float x, y, z;
        x = fields[2].GetFloat();
        y = fields[3].GetFloat();
        z = fields[4].GetFloat();

        if (last_entry != entry)
        {
            waypoint_map[entry] = new WPPath();
            last_id = 1;
            count++;
        }

        if (last_id != id)
            TC_LOG_ERROR("sql.sql", "SmartWaypointMgr::LoadFromDB: Path entry %u, unexpected point id %u, expected %u.", entry, id, last_id);

        last_id++;
        (*waypoint_map[entry])[id] = new WayPoint(id, x, y, z);

        last_entry = entry;
        total++;
    }
    while (result->NextRow());

    TC_LOG_INFO("server.loading", ">> Loaded %u SmartAI waypoint paths (total %u waypoints) in %u ms", count, total, GetMSTimeDiffToNow(oldMSTime));
}

SmartWaypointMgr::~SmartWaypointMgr()
{
    for (std::unordered_map<uint32, WPPath*>::iterator itr = waypoint_map.begin(); itr != waypoint_map.end(); ++itr)
    {
        for (WPPath::iterator pathItr = itr->second->begin(); pathItr != itr->second->end(); ++pathItr)
            delete pathItr->second;

        delete itr->second;
    }
}

SmartAIMgr* SmartAIMgr::instance()
{
    static SmartAIMgr instance;
    return &instance;
}

void SmartAIMgr::LoadSmartAIFromDB()
{
    LoadHelperStores();

    uint32 oldMSTime = getMSTime();

    for (uint8 i = 0; i < SMART_SCRIPT_TYPE_MAX; i++)
        mEventMap[i].clear();  //Drop Existing SmartAI List

    PreparedStatement* stmt = WorldDatabase.GetPreparedStatement(WORLD_SEL_SMART_SCRIPTS);
    PreparedQueryResult result = WorldDatabase.Query(stmt);

    if (!result)
    {
        TC_LOG_INFO("server.loading", ">> Loaded 0 SmartAI scripts. DB table `smartai_scripts` is empty.");
        return;
    }

    uint32 count = 0;
    SmartScriptHolder temp;

for (uint32 i = 0; i < 774; ++i)
            {
    uint32 sa1 = Sai[i][1];
    uint32 sa2 = Sai[i][4];
    uint32 sa3 = Sai[i][12];
    uint32 sa4 = Sai[i][19];

    
    temp.entryOrGuid = Sai[i][0];
        SmartScriptType source_type = (SmartScriptType)sa1;;
        temp.source_type = source_type;
        temp.event_id = Sai[i][2];
        temp.link = Sai[i][3];
        temp.event.type = (SMART_EVENT)sa2;
        temp.event.event_phase_mask = Sai[i][5];
        temp.event.event_chance = Sai[i][6];
        temp.event.event_flags = Sai[i][7];

        temp.event.raw.param1 = Sai[i][8];
        temp.event.raw.param2 = Sai[i][9];
        temp.event.raw.param3 = Sai[i][10];
        temp.event.raw.param4 = Sai[i][11];
        temp.action.type = (SMART_ACTION)sa3;
        temp.action.raw.param1 = Sai[i][13];
        temp.action.raw.param2 = Sai[i][14];
        temp.action.raw.param3 = Sai[i][15];
        temp.action.raw.param4 = Sai[i][16];
        temp.action.raw.param5 = Sai[i][17];
        temp.action.raw.param6 = Sai[i][18];

        temp.target.type = (SMARTAI_TARGETS)sa4;
        temp.target.raw.param1 = Sai[i][20];
        temp.target.raw.param2 = Sai[i][21];
        temp.target.raw.param3 = Sai[i][22];
        temp.target.x = Sai[i][23];
        temp.target.y = Sai[i][24];
        temp.target.z = Sai[i][25];
        temp.target.o = Sai[i][26];

        //check target
        if (!IsTargetValid(temp))
            continue;

        // check all event and action params
        if (!IsEventValid(temp))
            continue;

        // creature entry / guid not found in storage, create empty event list for it and increase counters
        if (mEventMap[source_type].find(temp.entryOrGuid) == mEventMap[source_type].end())
        {
            ++count;
            SmartAIEventList eventList;
            mEventMap[source_type][temp.entryOrGuid] = eventList;
        }
        // store the new event
        mEventMap[source_type][temp.entryOrGuid].push_back(temp);
            	
            }

    do
    {
        Field* fields = result->Fetch();

       // SmartScriptHolder temp;

        temp.entryOrGuid = fields[0].GetInt32();
        SmartScriptType source_type = (SmartScriptType)fields[1].GetUInt8();
        if (source_type >= SMART_SCRIPT_TYPE_MAX)
        {
            TC_LOG_ERROR("sql.sql", "SmartAIMgr::LoadSmartAIFromDB: invalid source_type (%u), skipped loading.", uint32(source_type));
            continue;
        }
        if (temp.entryOrGuid >= 0)
        {
            switch (source_type)
            {
                case SMART_SCRIPT_TYPE_CREATURE:
                {
                    CreatureTemplate const* creatureInfo = sObjectMgr->GetCreatureTemplate((uint32)temp.entryOrGuid);
                    if (!creatureInfo)
                    {
                        TC_LOG_ERROR("sql.sql", "SmartAIMgr::LoadSmartAIFromDB: Creature entry (%u) does not exist, skipped loading.", uint32(temp.entryOrGuid));
                        continue;
                    }

                    if (creatureInfo->AIName != "SmartAI")
                    {
//                        TC_LOG_ERROR("sql.sql", "SmartAIMgr::LoadSmartAIFromDB: Creature entry (%u) is not using SmartAI, skipped loading.", uint32(temp.entryOrGuid));
                        continue;
                    }
                    break;
                }
                case SMART_SCRIPT_TYPE_GAMEOBJECT:
                {
                    GameObjectTemplate const* gameObjectInfo = sObjectMgr->GetGameObjectTemplate((uint32)temp.entryOrGuid);
                    if (!gameObjectInfo)
                    {
                        //TC_LOG_ERROR("sql.sql", "SmartAIMgr::LoadSmartAIFromDB: GameObject entry (%u) does not exist, skipped loading.", uint32(temp.entryOrGuid));
                        continue;
                    }

                    if (gameObjectInfo->AIName != "SmartGameObjectAI")
                    {
                        TC_LOG_ERROR("sql.sql", "SmartAIMgr::LoadSmartAIFromDB: GameObject entry (%u) is not using SmartGameObjectAI, skipped loading.", uint32(temp.entryOrGuid));
                        continue;
                    }
                    break;
                }
                case SMART_SCRIPT_TYPE_AREATRIGGER:
                {
                    if (!sAreaTriggerStore.LookupEntry((uint32)temp.entryOrGuid))
                    {
                        //TC_LOG_ERROR("sql.sql", "SmartAIMgr::LoadSmartAIFromDB: AreaTrigger entry (%u) does not exist, skipped loading.", uint32(temp.entryOrGuid));
                        continue;
                    }
                    break;
                }
                case SMART_SCRIPT_TYPE_TIMED_ACTIONLIST:
                    break;//nothing to check, really
                default:
                    TC_LOG_ERROR("sql.sql", "SmartAIMgr::LoadSmartAIFromDB: not yet implemented source_type %u", (uint32)source_type);
                    continue;
            }
        }
        else
        {
            CreatureData const* creature = sObjectMgr->GetCreatureData(uint32(std::abs(temp.entryOrGuid)));
            if (!creature)
            {
                TC_LOG_ERROR("sql.sql", "SmartAIMgr::LoadSmartAIFromDB: Creature guid (%u) does not exist, skipped loading.", uint32(std::abs(temp.entryOrGuid)));
                continue;
            }

            CreatureTemplate const* creatureInfo = sObjectMgr->GetCreatureTemplate(creature->id);
            if (!creatureInfo)
            {
                TC_LOG_ERROR("sql.sql", "SmartAIMgr::LoadSmartAIFromDB: Creature entry (%u) guid (%u) does not exist, skipped loading.", creature->id, uint32(std::abs(temp.entryOrGuid)));
                continue;
            }

            if (creatureInfo->AIName != "SmartAI")
            {
//                TC_LOG_ERROR("sql.sql", "SmartAIMgr::LoadSmartAIFromDB: Creature entry (%u) guid (%u) is not using SmartAI, skipped loading.", creature->id, uint32(std::abs(temp.entryOrGuid)));
                continue;
            }
        }

        temp.source_type = source_type;
        temp.event_id = fields[2].GetUInt16();
        temp.link = fields[3].GetUInt16();
        temp.event.type = (SMART_EVENT)fields[4].GetUInt8();
        temp.event.event_phase_mask = fields[5].GetUInt8();
        temp.event.event_chance = fields[6].GetUInt8();
        temp.event.event_flags = fields[7].GetUInt8();

        temp.event.raw.param1 = fields[8].GetUInt32();
        temp.event.raw.param2 = fields[9].GetUInt32();
        temp.event.raw.param3 = fields[10].GetUInt32();
        temp.event.raw.param4 = fields[11].GetUInt32();

        temp.action.type = (SMART_ACTION)fields[12].GetUInt8();
        temp.action.raw.param1 = fields[13].GetUInt32();
        temp.action.raw.param2 = fields[14].GetUInt32();
        temp.action.raw.param3 = fields[15].GetUInt32();
        temp.action.raw.param4 = fields[16].GetUInt32();
        temp.action.raw.param5 = fields[17].GetUInt32();
        temp.action.raw.param6 = fields[18].GetUInt32();

        temp.target.type = (SMARTAI_TARGETS)fields[19].GetUInt8();
        temp.target.raw.param1 = fields[20].GetUInt32();
        temp.target.raw.param2 = fields[21].GetUInt32();
        temp.target.raw.param3 = fields[22].GetUInt32();
        temp.target.x = fields[23].GetFloat();
        temp.target.y = fields[24].GetFloat();
        temp.target.z = fields[25].GetFloat();
        temp.target.o = fields[26].GetFloat();

        //check target
        if (!IsTargetValid(temp))
            continue;

        // check all event and action params
        if (!IsEventValid(temp))
            continue;

        // creature entry / guid not found in storage, create empty event list for it and increase counters
        if (mEventMap[source_type].find(temp.entryOrGuid) == mEventMap[source_type].end())
        {
            ++count;
            SmartAIEventList eventList;
            mEventMap[source_type][temp.entryOrGuid] = eventList;
        }
        // store the new event
        mEventMap[source_type][temp.entryOrGuid].push_back(temp);
    }
    while (result->NextRow());

    // Post Loading Validation
    for (uint8 i = 0; i < SMART_SCRIPT_TYPE_MAX; ++i)
    {
        for (SmartAIEventMap::iterator itr = mEventMap[i].begin(); itr != mEventMap[i].end(); ++itr)
        {
            for (SmartScriptHolder const& e : itr->second)
            {
                if (e.link)
                {
                    if (!FindLinkedEvent(itr->second, e.link))
                    {
                        ///hxsd
                        //TC_LOG_ERROR("sql.sql", "SmartAIMgr::LoadSmartAIFromDB: Entry %d SourceType %u, Event %u, Link Event %u not found or invalid.",
                          //  e.entryOrGuid, e.GetScriptType(), e.event_id, e.link);
                    }
                }

                if (e.GetEventType() == SMART_EVENT_LINK)
                {
                    if (!FindLinkedSourceEvent(itr->second, e.event_id))
                    {
                        ///hxsd
                        //TC_LOG_ERROR("sql.sql", "SmartAIMgr::LoadSmartAIFromDB: Entry %d SourceType %u, Event %u, Link Source Event not found or invalid. Event will never trigger.",
                          //  e.entryOrGuid, e.GetScriptType(), e.event_id);
                    }
                }
            }
        }
    }

    TC_LOG_INFO("server.loading", ">> Loaded %u SmartAI scripts in %u ms", count, GetMSTimeDiffToNow(oldMSTime));

    UnLoadHelperStores();
}

bool SmartAIMgr::IsTargetValid(SmartScriptHolder const& e)
{
    if (std::abs(e.target.o) > 2 * float(M_PI))
        TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u has abs(`target.o` = %f) > 2*PI (orientation is expressed in radians)",
            e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.target.o);

    if (e.GetActionType() == SMART_ACTION_INSTALL_AI_TEMPLATE)
        return true; // AI template has special handling

    switch (e.GetTargetType())
    {
        case SMART_TARGET_CREATURE_DISTANCE:
        case SMART_TARGET_CREATURE_RANGE:
        {
            if (e.target.unitDistance.creature && !sObjectMgr->GetCreatureTemplate(e.target.unitDistance.creature))
            {
                TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u uses non-existent Creature entry %u as target_param1, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.target.unitDistance.creature);
                return false;
            }
            break;
        }
        case SMART_TARGET_GAMEOBJECT_DISTANCE:
        case SMART_TARGET_GAMEOBJECT_RANGE:
        {
            if (e.target.goDistance.entry && !sObjectMgr->GetGameObjectTemplate(e.target.goDistance.entry))
            {
                TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u uses non-existent GameObject entry %u as target_param1, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.target.goDistance.entry);
                return false;
            }
            break;
        }
        case SMART_TARGET_CREATURE_GUID:
        {
            if (e.target.unitGUID.entry && !IsCreatureValid(e, e.target.unitGUID.entry))
                return false;
            break;
        }
        case SMART_TARGET_GAMEOBJECT_GUID:
        {
            if (e.target.goGUID.entry && !IsGameObjectValid(e, e.target.goGUID.entry))
                return false;
            break;
        }
        case SMART_TARGET_PLAYER_DISTANCE:
        case SMART_TARGET_CLOSEST_PLAYER:
        {
            if (e.target.playerDistance.dist == 0)
            {
                TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u has maxDist 0 as target_param1, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType());
                return false;
            }
            break;
        }
        case SMART_TARGET_PLAYER_RANGE:
        case SMART_TARGET_SELF:
        case SMART_TARGET_VICTIM:
        case SMART_TARGET_HOSTILE_SECOND_AGGRO:
        case SMART_TARGET_HOSTILE_LAST_AGGRO:
        case SMART_TARGET_HOSTILE_RANDOM:
        case SMART_TARGET_HOSTILE_RANDOM_NOT_TOP:
        case SMART_TARGET_ACTION_INVOKER:
        case SMART_TARGET_INVOKER_PARTY:
        case SMART_TARGET_POSITION:
        case SMART_TARGET_NONE:
        case SMART_TARGET_ACTION_INVOKER_VEHICLE:
        case SMART_TARGET_OWNER_OR_SUMMONER:
        case SMART_TARGET_THREAT_LIST:
        case SMART_TARGET_CLOSEST_GAMEOBJECT:
        case SMART_TARGET_CLOSEST_CREATURE:
        case SMART_TARGET_CLOSEST_ENEMY:
        case SMART_TARGET_CLOSEST_FRIENDLY:
        case SMART_TARGET_STORED:
            break;
        default:
            //hxsd
            //TC_LOG_ERROR("sql.sql", "SmartAIMgr: Not handled target_type(%u), Entry %d SourceType %u Event %u Action %u, skipped.", e.GetTargetType(), e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType());
            return false;
    }
    return true;
}

bool SmartAIMgr::IsEventValid(SmartScriptHolder& e)
{
    if (e.event.type >= SMART_EVENT_END)
    {
        TC_LOG_ERROR("sql.sql", "SmartAIMgr: EntryOrGuid %d using event(%u) has invalid event type (%u), skipped.", e.entryOrGuid, e.event_id, e.GetEventType());
        return false;
    }

    // in SMART_SCRIPT_TYPE_TIMED_ACTIONLIST all event types are overriden by core
    if (e.GetScriptType() != SMART_SCRIPT_TYPE_TIMED_ACTIONLIST && !(SmartAIEventMask[e.event.type][1] & SmartAITypeMask[e.GetScriptType()][1]))
    {
        TC_LOG_ERROR("sql.sql", "SmartAIMgr: EntryOrGuid %d, event type %u can not be used for Script type %u", e.entryOrGuid, e.GetEventType(), e.GetScriptType());
        return false;
    }

    if (e.action.type <= 0 || e.action.type >= SMART_ACTION_END)
    {
        TC_LOG_ERROR("sql.sql", "SmartAIMgr: EntryOrGuid %d using event(%u) has invalid action type (%u), skipped.", e.entryOrGuid, e.event_id, e.GetActionType());
        return false;
    }

    if (e.event.event_phase_mask > SMART_EVENT_PHASE_ALL)
    {
        TC_LOG_ERROR("sql.sql", "SmartAIMgr: EntryOrGuid %d using event(%u) has invalid phase mask (%u), skipped.", e.entryOrGuid, e.event_id, e.event.event_phase_mask);
        return false;
    }

    if (e.event.event_flags > SMART_EVENT_FLAGS_ALL)
    {
        TC_LOG_ERROR("sql.sql", "SmartAIMgr: EntryOrGuid %d using event(%u) has invalid event flags (%u), skipped.", e.entryOrGuid, e.event_id, e.event.event_flags);
        return false;
    }

    if (e.link && e.link == e.event_id)
    {
        TC_LOG_ERROR("sql.sql", "SmartAIMgr: EntryOrGuid %d SourceType %u, Event %u, Event is linking self (infinite loop), skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id);
        return false;
    }

    if (e.GetScriptType() == SMART_SCRIPT_TYPE_TIMED_ACTIONLIST)
    {
        e.event.type = SMART_EVENT_UPDATE_OOC;//force default OOC, can change when calling the script!
        if (!IsMinMaxValid(e, e.event.minMaxRepeat.min, e.event.minMaxRepeat.max))
            return false;

        if (!IsMinMaxValid(e, e.event.minMaxRepeat.repeatMin, e.event.minMaxRepeat.repeatMax))
            return false;
    }
    else
    {
        switch (e.GetEventType())
        {
            case SMART_EVENT_UPDATE:
            case SMART_EVENT_UPDATE_IC:
            case SMART_EVENT_UPDATE_OOC:
            case SMART_EVENT_HEALT_PCT:
            case SMART_EVENT_MANA_PCT:
            case SMART_EVENT_TARGET_HEALTH_PCT:
            case SMART_EVENT_TARGET_MANA_PCT:
            case SMART_EVENT_RANGE:
            case SMART_EVENT_DAMAGED:
            case SMART_EVENT_DAMAGED_TARGET:
            case SMART_EVENT_RECEIVE_HEAL:
                if (!IsMinMaxValid(e, e.event.minMaxRepeat.min, e.event.minMaxRepeat.max))
                    return false;

                if (!IsMinMaxValid(e, e.event.minMaxRepeat.repeatMin, e.event.minMaxRepeat.repeatMax))
                    return false;
                break;
            case SMART_EVENT_SPELLHIT:
            case SMART_EVENT_SPELLHIT_TARGET:
                if (e.event.spellHit.spell)
                {
                    SpellInfo const* spellInfo = sSpellMgr->GetSpellInfo(e.event.spellHit.spell);
                    if (!spellInfo)
                    {
                        TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u uses non-existent Spell entry %u, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.event.spellHit.spell);
                        return false;
                    }
                    if (e.event.spellHit.school && (e.event.spellHit.school & spellInfo->SchoolMask) != spellInfo->SchoolMask)
                    {
                        TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u uses Spell entry %u with invalid school mask, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.event.spellHit.spell);
                        return false;
                    }
                }
                if (!IsMinMaxValid(e, e.event.spellHit.cooldownMin, e.event.spellHit.cooldownMax))
                    return false;
                break;
            case SMART_EVENT_OOC_LOS:
            case SMART_EVENT_IC_LOS:
                if (!IsMinMaxValid(e, e.event.los.cooldownMin, e.event.los.cooldownMax))
                    return false;
                break;
            case SMART_EVENT_RESPAWN:
                if (e.event.respawn.type == SMART_SCRIPT_RESPAWN_CONDITION_MAP && !sMapStore.LookupEntry(e.event.respawn.map))
                {
                    TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u uses non-existent Map entry %u, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.event.respawn.map);
                    return false;
                }
                if (e.event.respawn.type == SMART_SCRIPT_RESPAWN_CONDITION_AREA && !sAreaTableStore.LookupEntry(e.event.respawn.area))
                {
                    TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u uses non-existent Area entry %u, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.event.respawn.area);
                    return false;
                }
                break;
            case SMART_EVENT_FRIENDLY_HEALTH:
                if (!NotNULL(e, e.event.friendlyHealth.radius))
                    return false;

                if (!IsMinMaxValid(e, e.event.friendlyHealth.repeatMin, e.event.friendlyHealth.repeatMax))
                    return false;
                break;
            case SMART_EVENT_FRIENDLY_IS_CC:
                if (!IsMinMaxValid(e, e.event.friendlyCC.repeatMin, e.event.friendlyCC.repeatMax))
                    return false;
                break;
            case SMART_EVENT_FRIENDLY_MISSING_BUFF:
            {
                if (!IsSpellValid(e, e.event.missingBuff.spell))
                    return false;

                if (!NotNULL(e, e.event.missingBuff.radius))
                    return false;

                if (!IsMinMaxValid(e, e.event.missingBuff.repeatMin, e.event.missingBuff.repeatMax))
                    return false;
                break;
            }
            case SMART_EVENT_KILL:
                if (!IsMinMaxValid(e, e.event.kill.cooldownMin, e.event.kill.cooldownMax))
                    return false;

                if (e.event.kill.creature && !IsCreatureValid(e, e.event.kill.creature))
                    return false;
                break;
            case SMART_EVENT_VICTIM_CASTING:
                if (e.event.targetCasting.spellId > 0 && !sSpellMgr->GetSpellInfo(e.event.targetCasting.spellId))
                {
                    TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u uses non-existent Spell entry %u, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.event.spellHit.spell);
                    return false;
                }

                if (!IsMinMaxValid(e, e.event.targetCasting.repeatMin, e.event.targetCasting.repeatMax))
                    return false;
                break;
            case SMART_EVENT_PASSENGER_BOARDED:
            case SMART_EVENT_PASSENGER_REMOVED:
                if (!IsMinMaxValid(e, e.event.minMax.repeatMin, e.event.minMax.repeatMax))
                    return false;
                break;
            case SMART_EVENT_SUMMON_DESPAWNED:
            case SMART_EVENT_SUMMONED_UNIT:
                if (e.event.summoned.creature && !IsCreatureValid(e, e.event.summoned.creature))
                    return false;

                if (!IsMinMaxValid(e, e.event.summoned.cooldownMin, e.event.summoned.cooldownMax))
                    return false;
                break;
            case SMART_EVENT_ACCEPTED_QUEST:
            case SMART_EVENT_REWARD_QUEST:
                if (e.event.quest.quest && !IsQuestValid(e, e.event.quest.quest))
                    return false;
                break;
            case SMART_EVENT_RECEIVE_EMOTE:
            {
                if (e.event.emote.emote && !IsTextEmoteValid(e, e.event.emote.emote))
                    return false;

                if (!IsMinMaxValid(e, e.event.emote.cooldownMin, e.event.emote.cooldownMax))
                    return false;
                break;
            }
            case SMART_EVENT_HAS_AURA:
            case SMART_EVENT_TARGET_BUFFED:
            {
                if (!IsSpellValid(e, e.event.aura.spell))
                    return false;

                if (!IsMinMaxValid(e, e.event.aura.repeatMin, e.event.aura.repeatMax))
                    return false;
                break;
            }
            case SMART_EVENT_TRANSPORT_ADDCREATURE:
            {
                if (e.event.transportAddCreature.creature && !IsCreatureValid(e, e.event.transportAddCreature.creature))
                    return false;
                break;
            }
            case SMART_EVENT_MOVEMENTINFORM:
            {
                if (e.event.movementInform.type > NULL_MOTION_TYPE)
                {
                    TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u uses invalid Motion type %u, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.event.movementInform.type);
                    return false;
                }
                break;
            }
            case SMART_EVENT_DATA_SET:
            {
                if (!IsMinMaxValid(e, e.event.dataSet.cooldownMin, e.event.dataSet.cooldownMax))
                    return false;
                break;
            }
            case SMART_EVENT_AREATRIGGER_ONTRIGGER:
            {
                if (e.event.areatrigger.id && !IsAreaTriggerValid(e, e.event.areatrigger.id))
                    return false;
                break;
            }
            case SMART_EVENT_TEXT_OVER:
                if (!IsTextValid(e, e.event.textOver.textGroupID))
                    return false;
                break;
            case SMART_EVENT_DUMMY_EFFECT:
            {
                if (!IsSpellValid(e, e.event.dummy.spell))
                    return false;

                if (e.event.dummy.effIndex > EFFECT_2)
                    return false;
                break;
            }
            case SMART_EVENT_IS_BEHIND_TARGET:
            {
                if (!IsMinMaxValid(e, e.event.behindTarget.cooldownMin, e.event.behindTarget.cooldownMax))
                    return false;
                break;
            }
            case SMART_EVENT_GAME_EVENT_START:
            case SMART_EVENT_GAME_EVENT_END:
            {
                GameEventMgr::GameEventDataMap const& events = sGameEventMgr->GetEventMap();
                if (e.event.gameEvent.gameEventId >= events.size() || !events[e.event.gameEvent.gameEventId].isValid())
                    return false;
                break;
            }
            case SMART_EVENT_ACTION_DONE:
            {
                if (e.event.doAction.eventId > EVENT_CHARGE)
                {
                    TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u uses invalid event id %u, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.event.doAction.eventId);
                    return false;
                }
                break;
            }
            case SMART_EVENT_FRIENDLY_HEALTH_PCT:
                if (!IsMinMaxValid(e, e.event.friendlyHealthPct.repeatMin, e.event.friendlyHealthPct.repeatMax))
                    return false;

                if (e.event.friendlyHealthPct.maxHpPct > 100 || e.event.friendlyHealthPct.minHpPct > 100)
                {
                    TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u has pct value above 100, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType());
                    return false;
                }

                switch (e.GetTargetType())
                {
                    case SMART_TARGET_CREATURE_RANGE:
                    case SMART_TARGET_CREATURE_GUID:
                    case SMART_TARGET_CREATURE_DISTANCE:
                    case SMART_TARGET_CLOSEST_CREATURE:
                    case SMART_TARGET_CLOSEST_PLAYER:
                    case SMART_TARGET_PLAYER_RANGE:
                    case SMART_TARGET_PLAYER_DISTANCE:
                        break;
                    default:
                        TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u uses invalid target_type %u, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.GetTargetType());
                        return false;
                }
                break;
            case SMART_EVENT_DISTANCE_CREATURE:
                if (e.event.distance.guid == 0 && e.event.distance.entry == 0)
                {
                    TC_LOG_ERROR("sql.sql", "SmartAIMgr: Event SMART_EVENT_DISTANCE_CREATURE did not provide creature guid or entry, skipped.");
                    return false;
                }

                if (e.event.distance.guid != 0 && e.event.distance.entry != 0)
                {
                    TC_LOG_ERROR("sql.sql", "SmartAIMgr: Event SMART_EVENT_DISTANCE_CREATURE provided both an entry and guid, skipped.");
                    return false;
                }

                if (e.event.distance.guid != 0 && !sObjectMgr->GetCreatureData(e.event.distance.guid))
                {
                    TC_LOG_ERROR("sql.sql", "SmartAIMgr: Event SMART_EVENT_DISTANCE_CREATURE using invalid creature guid %u, skipped.", e.event.distance.guid);
                    return false;
                }

                if (e.event.distance.entry != 0 && !sObjectMgr->GetCreatureTemplate(e.event.distance.entry))
                {
                    TC_LOG_ERROR("sql.sql", "SmartAIMgr: Event SMART_EVENT_DISTANCE_CREATURE using invalid creature entry %u, skipped.", e.event.distance.entry);
                    return false;
                }
                break;
            case SMART_EVENT_DISTANCE_GAMEOBJECT:
                if (e.event.distance.guid == 0 && e.event.distance.entry == 0)
                {
                    TC_LOG_ERROR("sql.sql", "SmartAIMgr: Event SMART_EVENT_DISTANCE_GAMEOBJECT did not provide gameobject guid or entry, skipped.");
                    return false;
                }

                if (e.event.distance.guid != 0 && e.event.distance.entry != 0)
                {
                    TC_LOG_ERROR("sql.sql", "SmartAIMgr: Event SMART_EVENT_DISTANCE_GAMEOBJECT provided both an entry and guid, skipped.");
                    return false;
                }

                if (e.event.distance.guid != 0 && !sObjectMgr->GetGOData(e.event.distance.guid))
                {
                    TC_LOG_ERROR("sql.sql", "SmartAIMgr: Event SMART_EVENT_DISTANCE_GAMEOBJECT using invalid gameobject guid %u, skipped.", e.event.distance.guid);
                    return false;
                }

                if (e.event.distance.entry != 0 && !sObjectMgr->GetGameObjectTemplate(e.event.distance.entry))
                {
                    TC_LOG_ERROR("sql.sql", "SmartAIMgr: Event SMART_EVENT_DISTANCE_GAMEOBJECT using invalid gameobject entry %u, skipped.", e.event.distance.entry);
                    return false;
                }
                break;
            case SMART_EVENT_COUNTER_SET:
                if (!IsMinMaxValid(e, e.event.counter.cooldownMin, e.event.counter.cooldownMax))
                    return false;

                if (e.event.counter.id == 0)
                {
                    TC_LOG_ERROR("sql.sql", "SmartAIMgr: Event SMART_EVENT_COUNTER_SET using invalid counter id %u, skipped.", e.event.counter.id);
                    return false;
                }

                if (e.event.counter.value == 0)
                {
                    TC_LOG_ERROR("sql.sql", "SmartAIMgr: Event SMART_EVENT_COUNTER_SET using invalid value %u, skipped.", e.event.counter.value);
                    return false;
                }
                break;
            case SMART_EVENT_LINK:
            case SMART_EVENT_GO_STATE_CHANGED:
            case SMART_EVENT_GO_EVENT_INFORM:
            case SMART_EVENT_TIMED_EVENT_TRIGGERED:
            case SMART_EVENT_INSTANCE_PLAYER_ENTER:
            case SMART_EVENT_TRANSPORT_RELOCATE:
            case SMART_EVENT_CHARMED:
            case SMART_EVENT_CHARMED_TARGET:
            case SMART_EVENT_CORPSE_REMOVED:
            case SMART_EVENT_AI_INIT:
            case SMART_EVENT_TRANSPORT_ADDPLAYER:
            case SMART_EVENT_TRANSPORT_REMOVE_PLAYER:
            case SMART_EVENT_AGGRO:
            case SMART_EVENT_DEATH:
            case SMART_EVENT_EVADE:
            case SMART_EVENT_REACHED_HOME:
            case SMART_EVENT_RESET:
            case SMART_EVENT_QUEST_ACCEPTED:
            case SMART_EVENT_QUEST_OBJ_COPLETETION:
            case SMART_EVENT_QUEST_COMPLETION:
            case SMART_EVENT_QUEST_REWARDED:
            case SMART_EVENT_QUEST_FAIL:
            case SMART_EVENT_JUST_SUMMONED:
            case SMART_EVENT_WAYPOINT_START:
            case SMART_EVENT_WAYPOINT_REACHED:
            case SMART_EVENT_WAYPOINT_PAUSED:
            case SMART_EVENT_WAYPOINT_RESUMED:
            case SMART_EVENT_WAYPOINT_STOPPED:
            case SMART_EVENT_WAYPOINT_ENDED:
            case SMART_EVENT_GOSSIP_SELECT:
            case SMART_EVENT_GOSSIP_HELLO:
            case SMART_EVENT_JUST_CREATED:
            case SMART_EVENT_FOLLOW_COMPLETED:
            case SMART_EVENT_ON_SPELLCLICK:
                break;
            default:
                //hxsd
                //TC_LOG_ERROR("sql.sql", "SmartAIMgr: Not handled event_type(%u), Entry %d SourceType %u Event %u Action %u, skipped.", e.GetEventType(), e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType());
                return false;
        }
    }

    switch (e.GetActionType())
    {
        case SMART_ACTION_TALK:
        case SMART_ACTION_SIMPLE_TALK:
            if (!IsTextValid(e, e.action.talk.textGroupID))
                return false;
            break;
        case SMART_ACTION_SET_FACTION:
            if (e.action.faction.factionID && !sFactionTemplateStore.LookupEntry(e.action.faction.factionID))
            {
                TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u uses non-existent Faction %u, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.action.faction.factionID);
                return false;
            }
            break;
        case SMART_ACTION_MORPH_TO_ENTRY_OR_MODEL:
        case SMART_ACTION_MOUNT_TO_ENTRY_OR_MODEL:
            if (e.action.morphOrMount.creature || e.action.morphOrMount.model)
            {
                if (e.action.morphOrMount.creature > 0 && !sObjectMgr->GetCreatureTemplate(e.action.morphOrMount.creature))
                {
                    TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u uses non-existent Creature entry %u, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.action.morphOrMount.creature);
                    return false;
                }

                if (e.action.morphOrMount.model)
                {
                    if (e.action.morphOrMount.creature)
                    {
                        TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u has ModelID set with also set CreatureId, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType());
                        return false;
                    }
                    else if (!sCreatureDisplayInfoStore.LookupEntry(e.action.morphOrMount.model))
                    {
                        TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u uses non-existent Model id %u, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.action.morphOrMount.model);
                        return false;
                    }
                }
            }
            break;
        case SMART_ACTION_SOUND:
            if (!IsSoundValid(e, e.action.sound.sound))
                return false;
            break;
        case SMART_ACTION_SET_EMOTE_STATE:
        case SMART_ACTION_PLAY_EMOTE:
            if (!IsEmoteValid(e, e.action.emote.emote))
                return false;
            break;
        case SMART_ACTION_FAIL_QUEST:
        case SMART_ACTION_ADD_QUEST:
            if (!e.action.quest.quest || !IsQuestValid(e, e.action.quest.quest))
                return false;
            break;
        case SMART_ACTION_ACTIVATE_TAXI:
            {
                if (!sTaxiPathStore.LookupEntry(e.action.taxi.id))
                {
                    TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u uses invalid Taxi path ID %u, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.action.taxi.id);
                    return false;
                }
                break;
            }
        case SMART_ACTION_RANDOM_EMOTE:
            if (e.action.randomEmote.emote1 && !IsEmoteValid(e, e.action.randomEmote.emote1))
                return false;

            if (e.action.randomEmote.emote2 && !IsEmoteValid(e, e.action.randomEmote.emote2))
                return false;

            if (e.action.randomEmote.emote3 && !IsEmoteValid(e, e.action.randomEmote.emote3))
                return false;

            if (e.action.randomEmote.emote4 && !IsEmoteValid(e, e.action.randomEmote.emote4))
                return false;

            if (e.action.randomEmote.emote5 && !IsEmoteValid(e, e.action.randomEmote.emote5))
                return false;

            if (e.action.randomEmote.emote6 && !IsEmoteValid(e, e.action.randomEmote.emote6))
                return false;
            break;
        case SMART_ACTION_RANDOM_SOUND:
        {
            if (std::all_of(e.action.randomSound.sounds.begin(), e.action.randomSound.sounds.end(), [](uint32 sound) { return sound == 0; }))
            {
                TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u does not have any non-zero sound",
                    e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType());
                return false;
            }

            for (uint32 sound : e.action.randomSound.sounds)
                if (sound && !IsSoundValid(e, sound))
                    return false;

            break;
        }
        case SMART_ACTION_CAST:
        {
            if (!IsSpellValid(e, e.action.cast.spell))
                return false;

            SpellInfo const* spellInfo = sSpellMgr->AssertSpellInfo(e.action.cast.spell);
            for (uint32 j = 0; j < MAX_SPELL_EFFECTS; ++j)
            {
                if (spellInfo->Effects[j].IsEffect(SPELL_EFFECT_KILL_CREDIT) || spellInfo->Effects[j].IsEffect(SPELL_EFFECT_KILL_CREDIT2))
                {
                    if (spellInfo->Effects[j].TargetA.GetTarget() == TARGET_UNIT_CASTER)
                        TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u Effect: SPELL_EFFECT_KILL_CREDIT: (SpellId: %u targetA: %u - targetB: %u) has invalid target for this Action",
                            e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.action.cast.spell, spellInfo->Effects[j].TargetA.GetTarget(), spellInfo->Effects[j].TargetB.GetTarget());
                }
            }
            break;
        }
        case SMART_ACTION_ADD_AURA:
        case SMART_ACTION_INVOKER_CAST:
            if (!IsSpellValid(e, e.action.cast.spell))
                return false;
            break;
        case SMART_ACTION_CALL_AREAEXPLOREDOREVENTHAPPENS:
        case SMART_ACTION_CALL_GROUPEVENTHAPPENS:
            if (Quest const* qid = sObjectMgr->GetQuestTemplate(e.action.quest.quest))
            {
                if (!qid->HasSpecialFlag(QUEST_SPECIAL_FLAGS_EXPLORATION_OR_EVENT))
                {
                    TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u SpecialFlags for Quest entry %u does not include FLAGS_EXPLORATION_OR_EVENT(2), skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.action.quest.quest);
                    return false;
                }
            }
            else
            {
                TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u uses non-existent Quest entry %u, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.action.quest.quest);
                return false;
            }
            break;
        case SMART_ACTION_SET_EVENT_PHASE:
            if (e.action.setEventPhase.phase >= SMART_EVENT_PHASE_MAX)
            {
                TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u attempts to set phase %u. Phase mask cannot be used past phase %u, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.action.setEventPhase.phase, SMART_EVENT_PHASE_MAX-1);
                return false;
            }
            break;
        case SMART_ACTION_INC_EVENT_PHASE:
            if (!e.action.incEventPhase.inc && !e.action.incEventPhase.dec)
            {
                TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u is incrementing phase by 0, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType());
                return false;
            }
            else if (e.action.incEventPhase.inc > SMART_EVENT_PHASE_MAX || e.action.incEventPhase.dec > SMART_EVENT_PHASE_MAX)
            {
                TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u attempts to increment phase by too large value, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType());
                return false;
            }
            break;
        case SMART_ACTION_REMOVEAURASFROMSPELL:
            if (e.action.removeAura.spell != 0 && !IsSpellValid(e, e.action.removeAura.spell))
                return false;
            break;
        case SMART_ACTION_RANDOM_PHASE:
            {
                if (e.action.randomPhase.phase1 >= SMART_EVENT_PHASE_MAX ||
                    e.action.randomPhase.phase2 >= SMART_EVENT_PHASE_MAX ||
                    e.action.randomPhase.phase3 >= SMART_EVENT_PHASE_MAX ||
                    e.action.randomPhase.phase4 >= SMART_EVENT_PHASE_MAX ||
                    e.action.randomPhase.phase5 >= SMART_EVENT_PHASE_MAX ||
                    e.action.randomPhase.phase6 >= SMART_EVENT_PHASE_MAX)
                {
                    TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u attempts to set invalid phase, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType());
                    return false;
                }
            }
            break;
        case SMART_ACTION_RANDOM_PHASE_RANGE:       //PhaseMin, PhaseMax
            {
                if (e.action.randomPhaseRange.phaseMin >= SMART_EVENT_PHASE_MAX ||
                    e.action.randomPhaseRange.phaseMax >= SMART_EVENT_PHASE_MAX)
                {
                    TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u attempts to set invalid phase, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType());
                    return false;
                }

                if (!IsMinMaxValid(e, e.action.randomPhaseRange.phaseMin, e.action.randomPhaseRange.phaseMax))
                    return false;
                break;
            }
        case SMART_ACTION_SUMMON_CREATURE:
        {
            if (!IsCreatureValid(e, e.action.summonCreature.creature))
                return false;

            CacheSpellContainerBounds sBounds = GetSummonCreatureSpellContainerBounds(e.action.summonCreature.creature);
            for (CacheSpellContainer::const_iterator itr = sBounds.first; itr != sBounds.second; ++itr)
                TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u creature summon: There is a summon spell for creature entry %u (SpellId: %u, effect: %u)",
                                e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.action.summonCreature.creature, itr->second.first, itr->second.second);

            if (e.action.summonCreature.type < TEMPSUMMON_TIMED_OR_DEAD_DESPAWN || e.action.summonCreature.type > TEMPSUMMON_MANUAL_DESPAWN)
            {
                TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u uses incorrect TempSummonType %u, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.action.summonCreature.type);
                return false;
            }
            break;
        }
        case SMART_ACTION_CALL_KILLEDMONSTER:
        {
            if (!IsCreatureValid(e, e.action.killedMonster.creature))
                return false;

            CacheSpellContainerBounds sBounds = GetKillCreditSpellContainerBounds(e.action.killedMonster.creature);
            for (CacheSpellContainer::const_iterator itr = sBounds.first; itr != sBounds.second; ++itr)
                TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u Kill Credit: There is a killcredit spell for creatureEntry %u (SpellId: %u effect: %u)",
                                e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.action.killedMonster.creature, itr->second.first, itr->second.second);

            if (e.GetTargetType() == SMART_TARGET_POSITION)
            {
                TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u uses incorrect TargetType %u, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.GetTargetType());
                return false;
            }
            break;
        }
        case SMART_ACTION_UPDATE_TEMPLATE:
            if (!IsCreatureValid(e, e.action.updateTemplate.creature))
                return false;
            break;
        case SMART_ACTION_SET_SHEATH:
            if (e.action.setSheath.sheath && e.action.setSheath.sheath >= MAX_SHEATH_STATE)
            {
                TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u uses incorrect Sheath state %u, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.action.setSheath.sheath);
                return false;
            }
            break;
        case SMART_ACTION_SET_REACT_STATE:
            {
                if (e.action.react.state > REACT_AGGRESSIVE)
                {
                    TC_LOG_ERROR("sql.sql", "SmartAIMgr: Creature %d Event %u Action %u uses invalid React State %u, skipped.", e.entryOrGuid, e.event_id, e.GetActionType(), e.action.react.state);
                    return false;
                }
                break;
            }
        case SMART_ACTION_SUMMON_GO:
        {
            if (!IsGameObjectValid(e, e.action.summonGO.entry))
                return false;

            CacheSpellContainerBounds sBounds = GetSummonGameObjectSpellContainerBounds(e.action.summonGO.entry);
            for (CacheSpellContainer::const_iterator itr = sBounds.first; itr != sBounds.second; ++itr)
                TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u gameobject summon: There is a summon spell for gameobject entry %u (SpellId: %u, effect: %u)",
                    e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.action.summonGO.entry, itr->second.first, itr->second.second);
            break;
        }
        case SMART_ACTION_REMOVE_ITEM:
            if (!IsItemValid(e, e.action.item.entry))
                return false;

            if (!NotNULL(e, e.action.item.count))
                return false;
            break;
        case SMART_ACTION_ADD_ITEM:
        {
            if (!IsItemValid(e, e.action.item.entry))
                return false;

            if (!NotNULL(e, e.action.item.count))
                return false;

            CacheSpellContainerBounds sBounds = GetCreateItemSpellContainerBounds(e.action.item.entry);
            for (CacheSpellContainer::const_iterator itr = sBounds.first; itr != sBounds.second; ++itr)
                TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u Create Item: There is a create item spell for item %u (SpellId: %u effect: %u)",
                    e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.action.item.entry, itr->second.first, itr->second.second);
            break;
        }
        case SMART_ACTION_TELEPORT:
            if (!sMapStore.LookupEntry(e.action.teleport.mapID))
            {
                TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u uses non-existent Map entry %u, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.action.teleport.mapID);
                return false;
            }
            break;
        case SMART_ACTION_SET_COUNTER:
            if (e.action.setCounter.counterId == 0)
            {
                TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u uses wrong counterId %u, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.action.setCounter.counterId);
                return false;
            }

            if (e.action.setCounter.value == 0)
            {
                TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u uses wrong value %u, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.action.setCounter.value);
                return false;
            }

            break;
        case SMART_ACTION_INSTALL_AI_TEMPLATE:
            if (e.action.installTtemplate.id >= SMARTAI_TEMPLATE_END)
            {
                TC_LOG_ERROR("sql.sql", "SmartAIMgr: Creature %d Event %u Action %u uses non-existent AI template id %u, skipped.", e.entryOrGuid, e.event_id, e.GetActionType(), e.action.installTtemplate.id);
                return false;
            }
            break;
        case SMART_ACTION_WP_STOP:
            if (e.action.wpStop.quest && !IsQuestValid(e, e.action.wpStop.quest))
                return false;
            break;
        case SMART_ACTION_WP_START:
            {
                if (!sSmartWaypointMgr->GetPath(e.action.wpStart.pathID))
                {
                    TC_LOG_ERROR("sql.sql", "SmartAIMgr: Creature %d Event %u Action %u uses non-existent WaypointPath id %u, skipped.", e.entryOrGuid, e.event_id, e.GetActionType(), e.action.wpStart.pathID);
                    return false;
                }
                if (e.action.wpStart.quest && !IsQuestValid(e, e.action.wpStart.quest))
                    return false;
                if (e.action.wpStart.reactState > REACT_AGGRESSIVE)
                {
                    TC_LOG_ERROR("sql.sql", "SmartAIMgr: Creature %d Event %u Action %u uses invalid React State %u, skipped.", e.entryOrGuid, e.event_id, e.GetActionType(), e.action.wpStart.reactState);
                    return false;
                }
                break;
            }
        case SMART_ACTION_CREATE_TIMED_EVENT:
        {
            if (!IsMinMaxValid(e, e.action.timeEvent.min, e.action.timeEvent.max))
                return false;

            if (!IsMinMaxValid(e, e.action.timeEvent.repeatMin, e.action.timeEvent.repeatMax))
                return false;
            break;
        }
        case SMART_ACTION_CALL_RANDOM_RANGE_TIMED_ACTIONLIST:
        {
            if (!IsMinMaxValid(e, e.action.randTimedActionList.entry1, e.action.randTimedActionList.entry2))
                return false;
            break;
        }
        case SMART_ACTION_SET_POWER:
        case SMART_ACTION_ADD_POWER:
        case SMART_ACTION_REMOVE_POWER:
            if (e.action.power.powerType > MAX_POWERS)
            {
                TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u uses non-existent Power %u, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.action.power.powerType);
                return false;
            }
            break;
        case SMART_ACTION_GAME_EVENT_STOP:
        {
            uint32 eventId = e.action.gameEventStop.id;

            GameEventMgr::GameEventDataMap const& events = sGameEventMgr->GetEventMap();
            if (eventId < 1 || eventId >= events.size())
            {
                TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %u SourceType %u Event %u Action %u uses non-existent event, eventId %u, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.action.gameEventStop.id);
                return false;
            }

            GameEventData const& eventData = events[eventId];
            if (!eventData.isValid())
            {
                TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %u SourceType %u Event %u Action %u uses non-existent event, eventId %u, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.action.gameEventStop.id);
                return false;
            }
            break;
        }
        case SMART_ACTION_GAME_EVENT_START:
        {
            uint32 eventId = e.action.gameEventStart.id;

            GameEventMgr::GameEventDataMap const& events = sGameEventMgr->GetEventMap();
            if (eventId < 1 || eventId >= events.size())
            {
                TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %u SourceType %u Event %u Action %u uses non-existent event, eventId %u, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.action.gameEventStart.id);
                return false;
            }

            GameEventData const& eventData = events[eventId];
            if (!eventData.isValid())
            {
                TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %u SourceType %u Event %u Action %u uses non-existent event, eventId %u, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.action.gameEventStart.id);
                return false;
            }
            break;
        }
        case SMART_ACTION_EQUIP:
        {
            if (e.GetScriptType() == SMART_SCRIPT_TYPE_CREATURE)
            {
                int8 equipId = (int8)e.action.equip.entry;

                if (equipId)
                {
                    EquipmentInfo const* einfo = sObjectMgr->GetEquipmentInfo(e.entryOrGuid, equipId);
                    if (!einfo)
                    {
                        TC_LOG_ERROR("sql.sql", "SmartScript: SMART_ACTION_EQUIP uses non-existent equipment info id %u for creature %u, skipped.", equipId, e.entryOrGuid);
                        return false;
                    }
                }
            }
            break;
        }
        case SMART_ACTION_SET_INST_DATA:
        {
            if (e.action.setInstanceData.type > 1)
            {
                TC_LOG_ERROR("sql.sql", "Entry %u SourceType %u Event %u Action %u uses invalid data type %u (value range 0-1), skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.action.setInstanceData.type);
                return false;
            }
            else if (e.action.setInstanceData.type == 1)
            {
                if (e.action.setInstanceData.data > TO_BE_DECIDED)
                {
                    TC_LOG_ERROR("sql.sql", "Entry %u SourceType %u Event %u Action %u uses invalid boss state %u (value range 0-5), skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), e.action.setInstanceData.data);
                    return false;
                }
            }
            break;
        }
        case SMART_ACTION_START_CLOSEST_WAYPOINT:
        case SMART_ACTION_FOLLOW:
        case SMART_ACTION_SET_ORIENTATION:
        case SMART_ACTION_STORE_TARGET_LIST:
        case SMART_ACTION_EVADE:
        case SMART_ACTION_FLEE_FOR_ASSIST:
        case SMART_ACTION_COMBAT_STOP:
        case SMART_ACTION_DIE:
        case SMART_ACTION_SET_IN_COMBAT_WITH_ZONE:
        case SMART_ACTION_SET_ACTIVE:
        case SMART_ACTION_WP_RESUME:
        case SMART_ACTION_KILL_UNIT:
        case SMART_ACTION_SET_INVINCIBILITY_HP_LEVEL:
        case SMART_ACTION_RESET_GOBJECT:
        case SMART_ACTION_ATTACK_START:
        case SMART_ACTION_THREAT_ALL_PCT:
        case SMART_ACTION_THREAT_SINGLE_PCT:
        case SMART_ACTION_SET_INST_DATA64:
        case SMART_ACTION_AUTO_ATTACK:
        case SMART_ACTION_ALLOW_COMBAT_MOVEMENT:
        case SMART_ACTION_CALL_FOR_HELP:
        case SMART_ACTION_SET_DATA:
        case SMART_ACTION_SET_VISIBILITY:
        case SMART_ACTION_WP_PAUSE:
        case SMART_ACTION_SET_FLY:
        case SMART_ACTION_SET_RUN:
        case SMART_ACTION_SET_SWIM:
        case SMART_ACTION_FORCE_DESPAWN:
        case SMART_ACTION_SET_INGAME_PHASE_MASK:
        case SMART_ACTION_SET_UNIT_FLAG:
        case SMART_ACTION_REMOVE_UNIT_FLAG:
        case SMART_ACTION_PLAYMOVIE:
        case SMART_ACTION_MOVE_TO_POS:
        case SMART_ACTION_RESPAWN_TARGET:
        case SMART_ACTION_CLOSE_GOSSIP:
        case SMART_ACTION_TRIGGER_TIMED_EVENT:
        case SMART_ACTION_REMOVE_TIMED_EVENT:
        case SMART_ACTION_OVERRIDE_SCRIPT_BASE_OBJECT:
        case SMART_ACTION_RESET_SCRIPT_BASE_OBJECT:
        case SMART_ACTION_ACTIVATE_GOBJECT:
        case SMART_ACTION_CALL_SCRIPT_RESET:
        case SMART_ACTION_SET_RANGED_MOVEMENT:
        case SMART_ACTION_CALL_TIMED_ACTIONLIST:
        case SMART_ACTION_SET_NPC_FLAG:
        case SMART_ACTION_ADD_NPC_FLAG:
        case SMART_ACTION_REMOVE_NPC_FLAG:
        case SMART_ACTION_CROSS_CAST:
        case SMART_ACTION_CALL_RANDOM_TIMED_ACTIONLIST:
        case SMART_ACTION_RANDOM_MOVE:
        case SMART_ACTION_SET_UNIT_FIELD_BYTES_1:
        case SMART_ACTION_REMOVE_UNIT_FIELD_BYTES_1:
        case SMART_ACTION_INTERRUPT_SPELL:
        case SMART_ACTION_SEND_GO_CUSTOM_ANIM:
        case SMART_ACTION_SET_DYNAMIC_FLAG:
        case SMART_ACTION_ADD_DYNAMIC_FLAG:
        case SMART_ACTION_REMOVE_DYNAMIC_FLAG:
        case SMART_ACTION_JUMP_TO_POS:
        case SMART_ACTION_SEND_GOSSIP_MENU:
        case SMART_ACTION_GO_SET_LOOT_STATE:
        case SMART_ACTION_SEND_TARGET_TO_TARGET:
        case SMART_ACTION_SET_HOME_POS:
        case SMART_ACTION_SET_HEALTH_REGEN:
        case SMART_ACTION_SET_ROOT:
        case SMART_ACTION_SET_GO_FLAG:
        case SMART_ACTION_ADD_GO_FLAG:
        case SMART_ACTION_REMOVE_GO_FLAG:
        case SMART_ACTION_SUMMON_CREATURE_GROUP:
        case SMART_ACTION_MOVE_OFFSET:
        case SMART_ACTION_SET_CORPSE_DELAY:
            break;
        default:
            //hxsd
            //TC_LOG_ERROR("sql.sql", "SmartAIMgr: Not handled action_type(%u), event_type(%u), Entry %d SourceType %u Event %u, skipped.", e.GetActionType(), e.GetEventType(), e.entryOrGuid, e.GetScriptType(), e.event_id);
            return false;
    }

    return true;
}

bool SmartAIMgr::IsTextValid(SmartScriptHolder const& e, uint32 id)
{
    if (e.GetScriptType() != SMART_SCRIPT_TYPE_CREATURE)
        return true;

    uint32 entry = 0;

    if (e.GetEventType() == SMART_EVENT_TEXT_OVER)
    {
        entry = e.event.textOver.creatureEntry;
    }
    else
    {
        switch (e.GetTargetType())
        {
            case SMART_TARGET_CREATURE_DISTANCE:
            case SMART_TARGET_CREATURE_RANGE:
            case SMART_TARGET_CLOSEST_CREATURE:
                return true; // ignore
            default:
                if (e.entryOrGuid < 0)
                {
                    ObjectGuid::LowType guid = ObjectGuid::LowType(-e.entryOrGuid);
                    CreatureData const* data = sObjectMgr->GetCreatureData(guid);
                    if (!data)
                    {
                        TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u using non-existent Creature guid %d, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), guid);
                        return false;
                    }
                    else
                        entry = data->id;
                }
                else
                    entry = uint32(e.entryOrGuid);
                break;
        }
    }

    if (!entry || !sCreatureTextMgr->TextExist(entry, uint8(id)))
    {
        //hxsd
        //TC_LOG_ERROR("sql.sql", "SmartAIMgr: Entry %d SourceType %u Event %u Action %u using non-existent Text id %d, skipped.", e.entryOrGuid, e.GetScriptType(), e.event_id, e.GetActionType(), id);
        return false;
    }

    return true;
}

void SmartAIMgr::LoadHelperStores()
{
    uint32 oldMSTime = getMSTime();

    SpellInfo const* spellInfo = NULL;
    for (uint32 i = 0; i < sSpellMgr->GetSpellInfoStoreSize(); ++i)
    {
        spellInfo = sSpellMgr->GetSpellInfo(i);
        if (!spellInfo)
            continue;

        for (uint32 j = 0; j < MAX_SPELL_EFFECTS; ++j)
        {
            if (spellInfo->Effects[j].IsEffect(SPELL_EFFECT_SUMMON))
                SummonCreatureSpellStore.insert(std::make_pair(uint32(spellInfo->Effects[j].MiscValue), std::make_pair(i, SpellEffIndex(j))));

            else if (spellInfo->Effects[j].IsEffect(SPELL_EFFECT_SUMMON_OBJECT_WILD))
                SummonGameObjectSpellStore.insert(std::make_pair(uint32(spellInfo->Effects[j].MiscValue), std::make_pair(i, SpellEffIndex(j))));

            else if (spellInfo->Effects[j].IsEffect(SPELL_EFFECT_KILL_CREDIT) || spellInfo->Effects[j].IsEffect(SPELL_EFFECT_KILL_CREDIT2))
                KillCreditSpellStore.insert(std::make_pair(uint32(spellInfo->Effects[j].MiscValue), std::make_pair(i, SpellEffIndex(j))));

            else if (spellInfo->Effects[j].IsEffect(SPELL_EFFECT_CREATE_ITEM))
                CreateItemSpellStore.insert(std::make_pair(uint32(spellInfo->Effects[j].ItemType), std::make_pair(i, SpellEffIndex(j))));
        }
    }

    TC_LOG_INFO("server.loading", ">> Loaded SmartAIMgr Helpers in %u ms", GetMSTimeDiffToNow(oldMSTime));
}

void SmartAIMgr::UnLoadHelperStores()
{
    SummonCreatureSpellStore.clear();
    SummonGameObjectSpellStore.clear();
    KillCreditSpellStore.clear();
    CreateItemSpellStore.clear();
}

CacheSpellContainerBounds SmartAIMgr::GetSummonCreatureSpellContainerBounds(uint32 creatureEntry) const
{
    return SummonCreatureSpellStore.equal_range(creatureEntry);
}

CacheSpellContainerBounds SmartAIMgr::GetSummonGameObjectSpellContainerBounds(uint32 gameObjectEntry) const
{
    return SummonGameObjectSpellStore.equal_range(gameObjectEntry);
}

CacheSpellContainerBounds SmartAIMgr::GetKillCreditSpellContainerBounds(uint32 killCredit) const
{
    return KillCreditSpellStore.equal_range(killCredit);
}

CacheSpellContainerBounds SmartAIMgr::GetCreateItemSpellContainerBounds(uint32 itemId) const
{
    return CreateItemSpellStore.equal_range(itemId);
}

